"""
The @deprecated built-in directive is used within the type system definition language to indicate deprecated portions of a GraphQL service's schema, such as deprecated fields on a type, arguments on a field, input fields on an input type, or values of an enum type.
"""
directive @deprecated(
    reason: String = "No longer supported"
) on ARGUMENT_DEFINITION | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
The @include directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional inclusion during execution as described by the if argument.
"""
directive @include(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The @skip directive may be provided for fields, fragment spreads, and inline fragments, and allows for conditional exclusion during execution as described by the if argument.
"""
directive @skip(if: Boolean!) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
The @specifiedBy built-in directive is used within the type system definition language to provide a scalar specification URL for specifying the behavior of custom scalar types.
"""
directive @specifiedBy(url: String!) on SCALAR

"""
A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.
"""
type __Directive {
    name: String!
    description: String
    isRepeatable: Boolean!
    locations: [__DirectiveLocation!]!
    args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.
"""
enum __DirectiveLocation {
    """
    Location adjacent to a query operation.
    """
    QUERY

    """
    Location adjacent to a mutation operation.
    """
    MUTATION

    """
    Location adjacent to a subscription operation.
    """
    SUBSCRIPTION

    """
    Location adjacent to a field.
    """
    FIELD

    """
    Location adjacent to a fragment definition.
    """
    FRAGMENT_DEFINITION

    """
    Location adjacent to a fragment spread.
    """
    FRAGMENT_SPREAD

    """
    Location adjacent to an inline fragment.
    """
    INLINE_FRAGMENT

    """
    Location adjacent to a variable definition.
    """
    VARIABLE_DEFINITION

    """
    Location adjacent to a schema definition.
    """
    SCHEMA

    """
    Location adjacent to a scalar definition.
    """
    SCALAR

    """
    Location adjacent to an object type definition.
    """
    OBJECT

    """
    Location adjacent to a field definition.
    """
    FIELD_DEFINITION

    """
    Location adjacent to an argument definition.
    """
    ARGUMENT_DEFINITION

    """
    Location adjacent to an interface definition.
    """
    INTERFACE

    """
    Location adjacent to a union definition.
    """
    UNION

    """
    Location adjacent to an enum definition.
    """
    ENUM

    """
    Location adjacent to an enum value definition.
    """
    ENUM_VALUE

    """
    Location adjacent to an input object type definition.
    """
    INPUT_OBJECT

    """
    Location adjacent to an input object field definition.
    """
    INPUT_FIELD_DEFINITION
}

"""
One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.
"""
type __EnumValue {
    name: String!
    description: String
    isDeprecated: Boolean!
    deprecationReason: String
}

"""
Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.
"""
type __Field {
    name: String!
    description: String
    args(includeDeprecated: Boolean = false): [__InputValue!]!
    type: __Type!
    isDeprecated: Boolean!
    deprecationReason: String
}

"""
Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.
"""
type __InputValue {
    name: String!
    description: String
    type: __Type!

    """
    A GraphQL-formatted string representing the default value for this input value.
    """
    defaultValue: String
    isDeprecated: Boolean!
    deprecationReason: String
}

"""
A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.
"""
type __Schema {
    description: String

    """
    A list of all types supported by this server.
    """
    types: [__Type!]!

    """
    The type that query operations will be rooted at.
    """
    queryType: __Type!

    """
    If this server supports mutation, the type that mutation operations will be rooted at.
    """
    mutationType: __Type

    """
    If this server support subscription, the type that subscription operations will be rooted at.
    """
    subscriptionType: __Type

    """
    A list of all directives supported by this server.
    """
    directives: [__Directive!]!
}

"""
The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.

Depending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.
"""
type __Type {
    kind: __TypeKind!
    name: String
    description: String
    specifiedByURL: String
    fields(includeDeprecated: Boolean = false): [__Field!]
    interfaces: [__Type!]
    possibleTypes: [__Type!]
    enumValues(includeDeprecated: Boolean = false): [__EnumValue!]
    inputFields(includeDeprecated: Boolean = false): [__InputValue!]
    ofType: __Type
    isOneOf: Boolean
}

"""
An enum describing what kind of type a given `__Type` is.
"""
enum __TypeKind {
    """
    Indicates this type is a scalar.
    """
    SCALAR

    """
    Indicates this type is an object. `fields` and `interfaces` are valid fields.
    """
    OBJECT

    """
    Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.
    """
    INTERFACE

    """
    Indicates this type is a union. `possibleTypes` is a valid field.
    """
    UNION

    """
    Indicates this type is an enum. `enumValues` is a valid field.
    """
    ENUM

    """
    Indicates this type is an input object. `inputFields` is a valid field.
    """
    INPUT_OBJECT

    """
    Indicates this type is a list. `ofType` is a valid field.
    """
    LIST

    """
    Indicates this type is a non-null. `ofType` is a valid field.
    """
    NON_NULL
}
schema {
    query: Query
    mutation: Mutation
}

type Action implements Entity {
    """
    The icon must match one of the icon names from flaticon.com, e.g., "fi-brands-instagram".
    """
    icon: String
    """
    The position of the icon relative to the label.
    """
    iconPosition: IconPosition
    """
    The unique identifier
    """
    id: ID!
    label: String!
    primary: Boolean
    """
    System stage field
    """
    stage: Stage!
    url: String!
}

input ActionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: ActionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type ActionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [ActionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input ActionCreateInput {
    icon: String
    iconPosition: IconPosition
    label: String!
    primary: Boolean
    url: String!
}

input ActionCreateManyInlineInput {
    """
    Create and connect multiple existing Action documents
    """
    create: [ActionCreateInput!]
}

input ActionCreateOneInlineInput {
    """
    Create and connect one Action document
    """
    create: ActionCreateInput
}

input ActionCreateWithPositionInput {
    """
    Document to create
    """
    data: ActionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type ActionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: Action!
}

"""
Identifies documents
"""
input ActionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ActionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ActionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ActionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    icon: String
    iconPosition: IconPosition
    """
    All values that are contained in given list.
    """
    iconPosition_in: [IconPosition]
    """
    Any other value that exists and is not equal to the given value.
    """
    iconPosition_not: IconPosition
    """
    All values that are not contained in given list.
    """
    iconPosition_not_in: [IconPosition]
    """
    All values containing the given string.
    """
    icon_contains: String
    """
    All values ending with the given string.
    """
    icon_ends_with: String
    """
    All values that are contained in given list.
    """
    icon_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    icon_not: String
    """
    All values not containing the given string.
    """
    icon_not_contains: String
    """
    All values not ending with the given string
    """
    icon_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    icon_not_in: [String]
    """
    All values not starting with the given string.
    """
    icon_not_starts_with: String
    """
    All values starting with the given string.
    """
    icon_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    primary: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    primary_not: Boolean
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

enum ActionOrderByInput {
    iconPosition_ASC
    iconPosition_DESC
    icon_ASC
    icon_DESC
    id_ASC
    id_DESC
    label_ASC
    label_DESC
    primary_ASC
    primary_DESC
    url_ASC
    url_DESC
}

union ActionParent = CtaSection | HeroSection | NavigationBar | PricingPlan

input ActionParentConnectInput {
    CtaSection: CtaSectionConnectInput
    HeroSection: HeroSectionConnectInput
    NavigationBar: NavigationBarConnectInput
    PricingPlan: PricingPlanConnectInput
}

input ActionParentCreateInput {
    CtaSection: CtaSectionCreateInput
    HeroSection: HeroSectionCreateInput
    NavigationBar: NavigationBarCreateInput
    PricingPlan: PricingPlanCreateInput
}

input ActionParentCreateManyInlineInput {
    """
    Create and connect multiple existing ActionParent documents
    """
    create: [ActionParentCreateInput!]
}

input ActionParentCreateOneInlineInput {
    """
    Create and connect one ActionParent document
    """
    create: ActionParentCreateInput
}

input ActionParentCreateWithPositionInput {
    CtaSection: CtaSectionCreateWithPositionInput
    HeroSection: HeroSectionCreateWithPositionInput
    NavigationBar: NavigationBarCreateWithPositionInput
    PricingPlan: PricingPlanCreateWithPositionInput
}

input ActionParentUpdateInput {
    CtaSection: CtaSectionUpdateInput
    HeroSection: HeroSectionUpdateInput
    NavigationBar: NavigationBarUpdateInput
    PricingPlan: PricingPlanUpdateInput
}

input ActionParentUpdateManyInlineInput {
    """
    Create and connect multiple ActionParent component instances
    """
    create: [ActionParentCreateWithPositionInput!]
    """
    Delete multiple ActionParent documents
    """
    delete: [ActionParentWhereUniqueInput!]
    """
    Update multiple ActionParent component instances
    """
    update: [ActionParentUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple ActionParent component instances
    """
    upsert: [ActionParentUpsertWithNestedWhereUniqueAndPositionInput!]
}

input ActionParentUpdateManyWithNestedWhereInput {
    CtaSection: CtaSectionUpdateManyWithNestedWhereInput
    HeroSection: HeroSectionUpdateManyWithNestedWhereInput
    NavigationBar: NavigationBarUpdateManyWithNestedWhereInput
    PricingPlan: PricingPlanUpdateManyWithNestedWhereInput
}

input ActionParentUpdateOneInlineInput {
    """
    Create and connect one ActionParent document
    """
    create: ActionParentCreateInput
    """
    Delete currently connected ActionParent document
    """
    delete: Boolean
    """
    Update single ActionParent document
    """
    update: ActionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single ActionParent document
    """
    upsert: ActionParentUpsertWithNestedWhereUniqueInput
}

input ActionParentUpdateWithNestedWhereUniqueAndPositionInput {
    CtaSection: CtaSectionUpdateWithNestedWhereUniqueAndPositionInput
    HeroSection: HeroSectionUpdateWithNestedWhereUniqueAndPositionInput
    NavigationBar: NavigationBarUpdateWithNestedWhereUniqueAndPositionInput
    PricingPlan: PricingPlanUpdateWithNestedWhereUniqueAndPositionInput
}

input ActionParentUpdateWithNestedWhereUniqueInput {
    CtaSection: CtaSectionUpdateWithNestedWhereUniqueInput
    HeroSection: HeroSectionUpdateWithNestedWhereUniqueInput
    NavigationBar: NavigationBarUpdateWithNestedWhereUniqueInput
    PricingPlan: PricingPlanUpdateWithNestedWhereUniqueInput
}

input ActionParentUpsertWithNestedWhereUniqueAndPositionInput {
    CtaSection: CtaSectionUpsertWithNestedWhereUniqueAndPositionInput
    HeroSection: HeroSectionUpsertWithNestedWhereUniqueAndPositionInput
    NavigationBar: NavigationBarUpsertWithNestedWhereUniqueAndPositionInput
    PricingPlan: PricingPlanUpsertWithNestedWhereUniqueAndPositionInput
}

input ActionParentUpsertWithNestedWhereUniqueInput {
    CtaSection: CtaSectionUpsertWithNestedWhereUniqueInput
    HeroSection: HeroSectionUpsertWithNestedWhereUniqueInput
    NavigationBar: NavigationBarUpsertWithNestedWhereUniqueInput
    PricingPlan: PricingPlanUpsertWithNestedWhereUniqueInput
}

input ActionParentWhereInput {
    CtaSection: CtaSectionWhereInput
    HeroSection: HeroSectionWhereInput
    NavigationBar: NavigationBarWhereInput
    PricingPlan: PricingPlanWhereInput
}

input ActionParentWhereUniqueInput {
    CtaSection: CtaSectionWhereUniqueInput
    HeroSection: HeroSectionWhereUniqueInput
    NavigationBar: NavigationBarWhereUniqueInput
    PricingPlan: PricingPlanWhereUniqueInput
}

input ActionUpdateInput {
    icon: String
    iconPosition: IconPosition
    label: String
    primary: Boolean
    url: String
}

input ActionUpdateManyInlineInput {
    """
    Create and connect multiple Action component instances
    """
    create: [ActionCreateWithPositionInput!]
    """
    Delete multiple Action documents
    """
    delete: [ActionWhereUniqueInput!]
    """
    Update multiple Action component instances
    """
    update: [ActionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple Action component instances
    """
    upsert: [ActionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input ActionUpdateManyInput {
    icon: String
    iconPosition: IconPosition
    label: String
    primary: Boolean
    url: String
}

input ActionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: ActionUpdateManyInput!
    """
    Document search
    """
    where: ActionWhereInput!
}

input ActionUpdateOneInlineInput {
    """
    Create and connect one Action document
    """
    create: ActionCreateInput
    """
    Delete currently connected Action document
    """
    delete: Boolean
    """
    Update single Action document
    """
    update: ActionUpdateWithNestedWhereUniqueInput
    """
    Upsert single Action document
    """
    upsert: ActionUpsertWithNestedWhereUniqueInput
}

input ActionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: ActionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: ActionWhereUniqueInput!
}

input ActionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: ActionUpdateInput!
    """
    Unique document search
    """
    where: ActionWhereUniqueInput!
}

input ActionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: ActionCreateInput!
    """
    Update document if it exists
    """
    update: ActionUpdateInput!
}

input ActionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: ActionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: ActionWhereUniqueInput!
}

input ActionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: ActionUpsertInput!
    """
    Unique document search
    """
    where: ActionWhereUniqueInput!
}

"""
Identifies documents
"""
input ActionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ActionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ActionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ActionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    icon: String
    iconPosition: IconPosition
    """
    All values that are contained in given list.
    """
    iconPosition_in: [IconPosition]
    """
    Any other value that exists and is not equal to the given value.
    """
    iconPosition_not: IconPosition
    """
    All values that are not contained in given list.
    """
    iconPosition_not_in: [IconPosition]
    """
    All values containing the given string.
    """
    icon_contains: String
    """
    All values ending with the given string.
    """
    icon_ends_with: String
    """
    All values that are contained in given list.
    """
    icon_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    icon_not: String
    """
    All values not containing the given string.
    """
    icon_not_contains: String
    """
    All values not ending with the given string
    """
    icon_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    icon_not_in: [String]
    """
    All values not starting with the given string.
    """
    icon_not_starts_with: String
    """
    All values starting with the given string.
    """
    icon_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    primary: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    primary_not: Boolean
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

"""
References Action record uniquely
"""
input ActionWhereUniqueInput {
    id: ID
}

type Aggregate {
    count: Int!
}

"""
Asset system model
"""
type Asset implements Entity & Node {
    companyLogoSiteConfig(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `companyLogoSiteConfig` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `companyLogoSiteConfig` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: SiteConfigOrderByInput
        skip: Int
        where: SiteConfigWhereInput
    ): [SiteConfig!]!
    """
    The time the document was created
    """
    createdAt(
        """
        Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
        """
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Asset!]!
    """
    The file name
    """
    fileName: String!
    """
    The file handle
    """
    handle: String!
    """
    The height of the file
    """
    height: Float
    """
    List of Asset versions
    """
    history(
        limit: Int! = 10
        skip: Int! = 0
        """
        This is optional and can be used to fetch the document version history for a specific stage instead of the current one
        """
        stageOverride: Stage
    ): [Version!]!
    """
    The unique identifier
    """
    id: ID!
    """
    System Locale field
    """
    locale: Locale!
    """
    Get the other localizations for this document
    """
    localizations(
        """
        Decides if the current locale should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Potential locales that should be returned.

        The order of locales will also override locale fall-backing behaviour in the query's subtree.

        Note any related model with localized fields in the query's subtree will be affected.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.
        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.

        Consider using this in conjunction with forceParentLocale on the children relation fields.
        """
        locales: [Locale!]! = [en]
    ): [Asset!]!
    """
    The mime type of the file
    """
    mimeType: String
    photoPerson(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `photoPerson` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `photoPerson` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: PersonOrderByInput
        skip: Int
        where: PersonWhereInput
    ): [Person!]!
    postImagePostPage(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `postImagePostPage` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `postImagePostPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: PostPageOrderByInput
        skip: Int
        where: PostPageWhereInput
    ): [PostPage!]!
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt(
        """
        Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
        """
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    """
    The file size
    """
    size: Float
    """
    System stage field
    """
    stage: Stage!
    """
    The time the document was updated
    """
    updatedAt(
        """
        Variation of DateTime field to return, allows value from base document, current localization, or combined by returning the newer value of both
        """
        variation: SystemDateTimeFieldVariation! = COMBINED
    ): DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Returns information you need to upload the asset. The type of upload is dependant on what you pass into asset creations as upload type.
    """
    upload: AssetUpload
    """
    Get the url for the asset with provided transformations applied.
    """
    url(transformation: AssetTransformationInput): String!
    """
    The file width
    """
    width: Float
}

input AssetConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: AssetWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type AssetConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [AssetEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input AssetCreateInput {
    companyLogoSiteConfig: SiteConfigCreateManyInlineInput
    createdAt: DateTime
    fileName: String
    imageHeroSection: HeroSectionCreateManyInlineInput
    """
    Inline mutations for managing document localizations excluding the default locale
    """
    localizations: AssetCreateLocalizationsInput
    logoImageLogoItem: LogoItemCreateManyInlineInput
    photoPerson: PersonCreateManyInlineInput
    postImagePostPage: PostPageCreateManyInlineInput
    updatedAt: DateTime
    """
    Optionally the system can upload a file for you, for that you need to provide a publicly accessible url
    """
    uploadUrl: String
}

input AssetCreateLocalizationDataInput {
    createdAt: DateTime
    fileName: String
    updatedAt: DateTime
    """
    Optionally the system can upload a file for you, for that you need to provide a publicly accessible url
    """
    uploadUrl: String
}

input AssetCreateLocalizationInput {
    """
    Localization input
    """
    data: AssetCreateLocalizationDataInput!
    locale: Locale!
}

input AssetCreateLocalizationsInput {
    """
    Create localizations for the newly-created document
    """
    create: [AssetCreateLocalizationInput!]
}

input AssetCreateManyInlineInput {
    """
    Connect multiple existing Asset documents
    """
    connect: [AssetWhereUniqueInput!]
    """
    Create and connect multiple existing Asset documents
    """
    create: [AssetCreateInput!]
}

input AssetCreateOneInlineInput {
    """
    Connect one existing Asset document
    """
    connect: AssetWhereUniqueInput
    """
    Create and connect one Asset document
    """
    create: AssetCreateInput
}

"""
An edge in a connection.
"""
type AssetEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: Asset!
}

"""
Identifies documents
"""
input AssetManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [AssetWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [AssetWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [AssetWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    companyLogoSiteConfig_every: SiteConfigWhereInput
    companyLogoSiteConfig_none: SiteConfigWhereInput
    companyLogoSiteConfig_some: SiteConfigWhereInput
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AssetWhereStageInput
    documentInStages_none: AssetWhereStageInput
    documentInStages_some: AssetWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    photoPerson_every: PersonWhereInput
    photoPerson_none: PersonWhereInput
    photoPerson_some: PersonWhereInput
    postImagePostPage_every: PostPageWhereInput
    postImagePostPage_none: PostPageWhereInput
    postImagePostPage_some: PostPageWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
    upload: AssetUploadWhereInput
}

enum AssetOrderByInput {
    createdAt_ASC
    createdAt_DESC
    fileName_ASC
    fileName_DESC
    handle_ASC
    handle_DESC
    height_ASC
    height_DESC
    id_ASC
    id_DESC
    mimeType_ASC
    mimeType_DESC
    publishedAt_ASC
    publishedAt_DESC
    size_ASC
    size_DESC
    updatedAt_ASC
    updatedAt_DESC
    width_ASC
    width_DESC
}

"""
Identifies documents
"""
input AssetSingleRelationWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [AssetSingleRelationWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [AssetSingleRelationWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [AssetSingleRelationWhereInput!]
    upload: AssetUploadWhereInput
}

"""
Transformations for Assets
"""
input AssetTransformationInput {
    document: DocumentTransformationInput
    image: ImageTransformationInput
    """
    Pass true if you want to validate the passed transformation parameters
    """
    validateOptions: Boolean = false
}

input AssetUpdateInput {
    companyLogoSiteConfig: SiteConfigUpdateManyInlineInput
    fileName: String
    imageHeroSection: HeroSectionUpdateManyInlineInput
    """
    Manage document localizations
    """
    localizations: AssetUpdateLocalizationsInput
    logoImageLogoItem: LogoItemUpdateManyInlineInput
    photoPerson: PersonUpdateManyInlineInput
    postImagePostPage: PostPageUpdateManyInlineInput
    """
    Use this to define if its a reupload for the asset
    """
    reUpload: Boolean
    """
    Optionally the system can upload a file for you, for that you need to provide a publicly accessible url
    """
    uploadUrl: String
}

input AssetUpdateLocalizationDataInput {
    fileName: String
    """
    Use this to define if its a reupload for the asset
    """
    reUpload: Boolean
    """
    Optionally the system can upload a file for you, for that you need to provide a publicly accessible url
    """
    uploadUrl: String
}

input AssetUpdateLocalizationInput {
    data: AssetUpdateLocalizationDataInput!
    locale: Locale!
}

input AssetUpdateLocalizationsInput {
    """
    Localizations to create
    """
    create: [AssetCreateLocalizationInput!]
    """
    Localizations to delete
    """
    delete: [Locale!]
    """
    Localizations to update
    """
    update: [AssetUpdateLocalizationInput!]
    upsert: [AssetUpsertLocalizationInput!]
}

input AssetUpdateManyInlineInput {
    """
    Connect multiple existing Asset documents
    """
    connect: [AssetConnectInput!]
    """
    Create and connect multiple Asset documents
    """
    create: [AssetCreateInput!]
    """
    Delete multiple Asset documents
    """
    delete: [AssetWhereUniqueInput!]
    """
    Disconnect multiple Asset documents
    """
    disconnect: [AssetWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing Asset documents
    """
    set: [AssetWhereUniqueInput!]
    """
    Update multiple Asset documents
    """
    update: [AssetUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple Asset documents
    """
    upsert: [AssetUpsertWithNestedWhereUniqueInput!]
}

input AssetUpdateManyInput {
    """
    No fields in updateMany data input
    """
    _: String
}

input AssetUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: AssetUpdateManyInput!
    """
    Document search
    """
    where: AssetWhereInput!
}

input AssetUpdateOneInlineInput {
    """
    Connect existing Asset document
    """
    connect: AssetWhereUniqueInput
    """
    Create and connect one Asset document
    """
    create: AssetCreateInput
    """
    Delete currently connected Asset document
    """
    delete: Boolean
    """
    Disconnect currently connected Asset document
    """
    disconnect: Boolean
    """
    Update single Asset document
    """
    update: AssetUpdateWithNestedWhereUniqueInput
    """
    Upsert single Asset document
    """
    upsert: AssetUpsertWithNestedWhereUniqueInput
}

input AssetUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: AssetUpdateInput!
    """
    Unique document search
    """
    where: AssetWhereUniqueInput!
}

"""
Asset Upload
"""
type AssetUpload {
    """
    Asset Upload Error
    """
    error: AssetUploadError
    """
    Expiry Timestamp
    """
    expiresAt: DateTime
    """
    Asset Request Data for upload
    """
    requestPostData: AssetUploadRequestPostData
    """
    Asset Request Data for upload
    """
    status: AssetUploadStatus
}

"""
Represents asset upload error
"""
type AssetUploadError {
    code: String!
    message: String!
}

"""
Asset Upload Request Post Data
"""
type AssetUploadRequestPostData {
    """
    The algorithm to use in the form field. This value should be passed in the `X-Amz-Algorithm` form field.
    """
    algorithm: String!
    """
    The credential to use in the form field. This value should be passed in the `X-Amz-Credential` form field.
    """
    credential: String!
    """
    The date the request was signed, formatted as YYYYMMDDTHHMMSSZ. This value should be passed in the `X-Amz-Date` header.
    """
    date: String!
    """
    The key to use in the form field. This value should be passed in the `Key` form field.
    """
    key: String!
    """
    The policy to use in the form field. This value should be passed in the `Policy` form field.
    """
    policy: String!
    """
    The security token to use in the form field. This field is optional only pass it if its not null. This value should be passed in the `X-Amz-Security-Token` form field if not null.
    """
    securityToken: String
    """
    The signature to use in the form field. This value should be passed in the `X-Amz-Signature` form field.
    """
    signature: String!
    """
    The URL to which the file should be uploaded with a POST request.
    """
    url: String!
}

"""
System Asset Upload Status
"""
enum AssetUploadStatus {
    ASSET_CREATE_PENDING
    ASSET_ERROR_UPLOAD
    ASSET_UPDATE_PENDING
    ASSET_UPLOAD_COMPLETE
}

"""
Identifies documents
"""
input AssetUploadWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [AssetUploadWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [AssetUploadWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [AssetUploadWhereInput!]
    expiresAt: DateTime
    """
    All values greater than the given value.
    """
    expiresAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    expiresAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    expiresAt_in: [DateTime]
    """
    All values less than the given value.
    """
    expiresAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    expiresAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    expiresAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    expiresAt_not_in: [DateTime]
    status: AssetUploadStatus
    """
    All values that are contained in given list.
    """
    status_in: [AssetUploadStatus]
    """
    Any other value that exists and is not equal to the given value.
    """
    status_not: AssetUploadStatus
    """
    All values that are not contained in given list.
    """
    status_not_in: [AssetUploadStatus]
}

"""
Identifies documents
"""
input AssetUploadWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [AssetUploadWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [AssetUploadWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [AssetUploadWhereInput!]
    expiresAt: DateTime
    """
    All values greater than the given value.
    """
    expiresAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    expiresAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    expiresAt_in: [DateTime]
    """
    All values less than the given value.
    """
    expiresAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    expiresAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    expiresAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    expiresAt_not_in: [DateTime]
    status: AssetUploadStatus
    """
    All values that are contained in given list.
    """
    status_in: [AssetUploadStatus]
    """
    Any other value that exists and is not equal to the given value.
    """
    status_not: AssetUploadStatus
    """
    All values that are not contained in given list.
    """
    status_not_in: [AssetUploadStatus]
}

input AssetUpsertInput {
    """
    Create document if it didn't exist
    """
    create: AssetCreateInput!
    """
    Update document if it exists
    """
    update: AssetUpdateInput!
}

input AssetUpsertLocalizationInput {
    create: AssetCreateLocalizationDataInput!
    locale: Locale!
    update: AssetUpdateLocalizationDataInput!
}

input AssetUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: AssetUpsertInput!
    """
    Unique document search
    """
    where: AssetWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input AssetWhereComparatorInput {
    """
    This field can be used to request to check if the entry is outdated by internal comparison
    """
    outdated_to: Boolean
}

"""
Identifies documents
"""
input AssetWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [AssetWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [AssetWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [AssetWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    companyLogoSiteConfig_every: SiteConfigWhereInput
    companyLogoSiteConfig_none: SiteConfigWhereInput
    companyLogoSiteConfig_some: SiteConfigWhereInput
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: AssetWhereStageInput
    documentInStages_none: AssetWhereStageInput
    documentInStages_some: AssetWhereStageInput
    fileName: String
    """
    All values containing the given string.
    """
    fileName_contains: String
    """
    All values ending with the given string.
    """
    fileName_ends_with: String
    """
    All values that are contained in given list.
    """
    fileName_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    fileName_not: String
    """
    All values not containing the given string.
    """
    fileName_not_contains: String
    """
    All values not ending with the given string
    """
    fileName_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    fileName_not_in: [String]
    """
    All values not starting with the given string.
    """
    fileName_not_starts_with: String
    """
    All values starting with the given string.
    """
    fileName_starts_with: String
    handle: String
    """
    All values containing the given string.
    """
    handle_contains: String
    """
    All values ending with the given string.
    """
    handle_ends_with: String
    """
    All values that are contained in given list.
    """
    handle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    handle_not: String
    """
    All values not containing the given string.
    """
    handle_not_contains: String
    """
    All values not ending with the given string
    """
    handle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    handle_not_in: [String]
    """
    All values not starting with the given string.
    """
    handle_not_starts_with: String
    """
    All values starting with the given string.
    """
    handle_starts_with: String
    height: Float
    """
    All values greater than the given value.
    """
    height_gt: Float
    """
    All values greater than or equal the given value.
    """
    height_gte: Float
    """
    All values that are contained in given list.
    """
    height_in: [Float]
    """
    All values less than the given value.
    """
    height_lt: Float
    """
    All values less than or equal the given value.
    """
    height_lte: Float
    """
    Any other value that exists and is not equal to the given value.
    """
    height_not: Float
    """
    All values that are not contained in given list.
    """
    height_not_in: [Float]
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    mimeType: String
    """
    All values containing the given string.
    """
    mimeType_contains: String
    """
    All values ending with the given string.
    """
    mimeType_ends_with: String
    """
    All values that are contained in given list.
    """
    mimeType_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    mimeType_not: String
    """
    All values not containing the given string.
    """
    mimeType_not_contains: String
    """
    All values not ending with the given string
    """
    mimeType_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    mimeType_not_in: [String]
    """
    All values not starting with the given string.
    """
    mimeType_not_starts_with: String
    """
    All values starting with the given string.
    """
    mimeType_starts_with: String
    photoPerson_every: PersonWhereInput
    photoPerson_none: PersonWhereInput
    photoPerson_some: PersonWhereInput
    postImagePostPage_every: PostPageWhereInput
    postImagePostPage_none: PostPageWhereInput
    postImagePostPage_some: PostPageWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    size: Float
    """
    All values greater than the given value.
    """
    size_gt: Float
    """
    All values greater than or equal the given value.
    """
    size_gte: Float
    """
    All values that are contained in given list.
    """
    size_in: [Float]
    """
    All values less than the given value.
    """
    size_lt: Float
    """
    All values less than or equal the given value.
    """
    size_lte: Float
    """
    Any other value that exists and is not equal to the given value.
    """
    size_not: Float
    """
    All values that are not contained in given list.
    """
    size_not_in: [Float]
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
    upload: AssetUploadWhereInput
    width: Float
    """
    All values greater than the given value.
    """
    width_gt: Float
    """
    All values greater than or equal the given value.
    """
    width_gte: Float
    """
    All values that are contained in given list.
    """
    width_in: [Float]
    """
    All values less than the given value.
    """
    width_lt: Float
    """
    All values less than or equal the given value.
    """
    width_lte: Float
    """
    Any other value that exists and is not equal to the given value.
    """
    width_not: Float
    """
    All values that are not contained in given list.
    """
    width_not_in: [Float]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input AssetWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [AssetWhereStageInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [AssetWhereStageInput!]
    """
    Logical OR on all given filters.
    """
    OR: [AssetWhereStageInput!]
    """
    This field contains fields which can be set as true or false to specify an internal comparison
    """
    compareWithParent: AssetWhereComparatorInput
    """
    Specify the stage to compare with
    """
    stage: Stage
}

"""
References Asset record uniquely
"""
input AssetWhereUniqueInput {
    id: ID
}

type BatchPayload {
    """
    The number of nodes that have been affected by the Batch operation.
    """
    count: Long!
}

"""
Representing a color value comprising of HEX, RGBA and css color values
"""
type Color {
    css: String!
    hex: Hex!
    rgba: RGBA!
}

"""
Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used.
"""
input ColorInput {
    hex: Hex
    rgba: RGBAInput
}

input ConnectPositionInput {
    """
    Connect document after specified document
    """
    after: ID
    """
    Connect document before specified document
    """
    before: ID
    """
    Connect document at last position
    """
    end: Boolean
    """
    Connect document at first position
    """
    start: Boolean
}

type ContactUsSection implements Entity {
    """
    The unique identifier
    """
    id: ID!
    """
    System stage field
    """
    stage: Stage!
    """
    The subtitle is shown under the section's title.
    """
    subtitle: String
    """
    The section's title.
    """
    title: String
}

input ContactUsSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: ContactUsSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type ContactUsSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [ContactUsSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input ContactUsSectionCreateInput {
    subtitle: String
    title: String
}

input ContactUsSectionCreateManyInlineInput {
    """
    Create and connect multiple existing ContactUsSection documents
    """
    create: [ContactUsSectionCreateInput!]
}

input ContactUsSectionCreateOneInlineInput {
    """
    Create and connect one ContactUsSection document
    """
    create: ContactUsSectionCreateInput
}

input ContactUsSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: ContactUsSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type ContactUsSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: ContactUsSection!
}

"""
Identifies documents
"""
input ContactUsSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ContactUsSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ContactUsSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ContactUsSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum ContactUsSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union ContactUsSectionParent = LandingPage

input ContactUsSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input ContactUsSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input ContactUsSectionParentCreateManyInlineInput {
    """
    Connect multiple existing ContactUsSectionParent documents
    """
    connect: [ContactUsSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing ContactUsSectionParent documents
    """
    create: [ContactUsSectionParentCreateInput!]
}

input ContactUsSectionParentCreateOneInlineInput {
    """
    Connect one existing ContactUsSectionParent document
    """
    connect: ContactUsSectionParentWhereUniqueInput
    """
    Create and connect one ContactUsSectionParent document
    """
    create: ContactUsSectionParentCreateInput
}

input ContactUsSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input ContactUsSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing ContactUsSectionParent documents
    """
    connect: [ContactUsSectionParentConnectInput!]
    """
    Create and connect multiple ContactUsSectionParent documents
    """
    create: [ContactUsSectionParentCreateInput!]
    """
    Delete multiple ContactUsSectionParent documents
    """
    delete: [ContactUsSectionParentWhereUniqueInput!]
    """
    Disconnect multiple ContactUsSectionParent documents
    """
    disconnect: [ContactUsSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing ContactUsSectionParent documents
    """
    set: [ContactUsSectionParentWhereUniqueInput!]
    """
    Update multiple ContactUsSectionParent documents
    """
    update: [ContactUsSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple ContactUsSectionParent documents
    """
    upsert: [ContactUsSectionParentUpsertWithNestedWhereUniqueInput!]
}

input ContactUsSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input ContactUsSectionParentUpdateOneInlineInput {
    """
    Connect existing ContactUsSectionParent document
    """
    connect: ContactUsSectionParentWhereUniqueInput
    """
    Create and connect one ContactUsSectionParent document
    """
    create: ContactUsSectionParentCreateInput
    """
    Delete currently connected ContactUsSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected ContactUsSectionParent document
    """
    disconnect: Boolean
    """
    Update single ContactUsSectionParent document
    """
    update: ContactUsSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single ContactUsSectionParent document
    """
    upsert: ContactUsSectionParentUpsertWithNestedWhereUniqueInput
}

input ContactUsSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input ContactUsSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input ContactUsSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input ContactUsSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input ContactUsSectionUpdateInput {
    subtitle: String
    title: String
}

input ContactUsSectionUpdateManyInlineInput {
    """
    Create and connect multiple ContactUsSection component instances
    """
    create: [ContactUsSectionCreateWithPositionInput!]
    """
    Delete multiple ContactUsSection documents
    """
    delete: [ContactUsSectionWhereUniqueInput!]
    """
    Update multiple ContactUsSection component instances
    """
    update: [ContactUsSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple ContactUsSection component instances
    """
    upsert: [ContactUsSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input ContactUsSectionUpdateManyInput {
    subtitle: String
    title: String
}

input ContactUsSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: ContactUsSectionUpdateManyInput!
    """
    Document search
    """
    where: ContactUsSectionWhereInput!
}

input ContactUsSectionUpdateOneInlineInput {
    """
    Create and connect one ContactUsSection document
    """
    create: ContactUsSectionCreateInput
    """
    Delete currently connected ContactUsSection document
    """
    delete: Boolean
    """
    Update single ContactUsSection document
    """
    update: ContactUsSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single ContactUsSection document
    """
    upsert: ContactUsSectionUpsertWithNestedWhereUniqueInput
}

input ContactUsSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: ContactUsSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: ContactUsSectionWhereUniqueInput!
}

input ContactUsSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: ContactUsSectionUpdateInput!
    """
    Unique document search
    """
    where: ContactUsSectionWhereUniqueInput!
}

input ContactUsSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: ContactUsSectionCreateInput!
    """
    Update document if it exists
    """
    update: ContactUsSectionUpdateInput!
}

input ContactUsSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: ContactUsSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: ContactUsSectionWhereUniqueInput!
}

input ContactUsSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: ContactUsSectionUpsertInput!
    """
    Unique document search
    """
    where: ContactUsSectionWhereUniqueInput!
}

"""
Identifies documents
"""
input ContactUsSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ContactUsSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ContactUsSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ContactUsSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References ContactUsSection record uniquely
"""
input ContactUsSectionWhereUniqueInput {
    id: ID
}

type CtaSection implements Entity {
    actions(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `actions` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `actions` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: ActionOrderByInput
        skip: Int
        where: ActionWhereInput
    ): [Action!]!
    """
    The unique identifier
    """
    id: ID!
    """
    System stage field
    """
    stage: Stage!
    """
    The subtitle is shown under the section's title.
    """
    subtitle: String
    """
    The section's title.
    """
    title: String
}

input CtaSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: CtaSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type CtaSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [CtaSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input CtaSectionCreateInput {
    actions: ActionCreateManyInlineInput
    subtitle: String
    title: String
}

input CtaSectionCreateManyInlineInput {
    """
    Create and connect multiple existing CtaSection documents
    """
    create: [CtaSectionCreateInput!]
}

input CtaSectionCreateOneInlineInput {
    """
    Create and connect one CtaSection document
    """
    create: CtaSectionCreateInput
}

input CtaSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: CtaSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type CtaSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: CtaSection!
}

"""
Identifies documents
"""
input CtaSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [CtaSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [CtaSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [CtaSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    actions_every: ActionWhereInput
    actions_none: ActionWhereInput
    actions_some: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum CtaSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union CtaSectionParent = LandingPage

input CtaSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input CtaSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input CtaSectionParentCreateManyInlineInput {
    """
    Connect multiple existing CtaSectionParent documents
    """
    connect: [CtaSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing CtaSectionParent documents
    """
    create: [CtaSectionParentCreateInput!]
}

input CtaSectionParentCreateOneInlineInput {
    """
    Connect one existing CtaSectionParent document
    """
    connect: CtaSectionParentWhereUniqueInput
    """
    Create and connect one CtaSectionParent document
    """
    create: CtaSectionParentCreateInput
}

input CtaSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input CtaSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing CtaSectionParent documents
    """
    connect: [CtaSectionParentConnectInput!]
    """
    Create and connect multiple CtaSectionParent documents
    """
    create: [CtaSectionParentCreateInput!]
    """
    Delete multiple CtaSectionParent documents
    """
    delete: [CtaSectionParentWhereUniqueInput!]
    """
    Disconnect multiple CtaSectionParent documents
    """
    disconnect: [CtaSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing CtaSectionParent documents
    """
    set: [CtaSectionParentWhereUniqueInput!]
    """
    Update multiple CtaSectionParent documents
    """
    update: [CtaSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple CtaSectionParent documents
    """
    upsert: [CtaSectionParentUpsertWithNestedWhereUniqueInput!]
}

input CtaSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input CtaSectionParentUpdateOneInlineInput {
    """
    Connect existing CtaSectionParent document
    """
    connect: CtaSectionParentWhereUniqueInput
    """
    Create and connect one CtaSectionParent document
    """
    create: CtaSectionParentCreateInput
    """
    Delete currently connected CtaSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected CtaSectionParent document
    """
    disconnect: Boolean
    """
    Update single CtaSectionParent document
    """
    update: CtaSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single CtaSectionParent document
    """
    upsert: CtaSectionParentUpsertWithNestedWhereUniqueInput
}

input CtaSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input CtaSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input CtaSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input CtaSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input CtaSectionUpdateInput {
    actions: ActionUpdateManyInlineInput
    subtitle: String
    title: String
}

input CtaSectionUpdateManyInlineInput {
    """
    Create and connect multiple CtaSection component instances
    """
    create: [CtaSectionCreateWithPositionInput!]
    """
    Delete multiple CtaSection documents
    """
    delete: [CtaSectionWhereUniqueInput!]
    """
    Update multiple CtaSection component instances
    """
    update: [CtaSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple CtaSection component instances
    """
    upsert: [CtaSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input CtaSectionUpdateManyInput {
    subtitle: String
    title: String
}

input CtaSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: CtaSectionUpdateManyInput!
    """
    Document search
    """
    where: CtaSectionWhereInput!
}

input CtaSectionUpdateOneInlineInput {
    """
    Create and connect one CtaSection document
    """
    create: CtaSectionCreateInput
    """
    Delete currently connected CtaSection document
    """
    delete: Boolean
    """
    Update single CtaSection document
    """
    update: CtaSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single CtaSection document
    """
    upsert: CtaSectionUpsertWithNestedWhereUniqueInput
}

input CtaSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: CtaSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: CtaSectionWhereUniqueInput!
}

input CtaSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: CtaSectionUpdateInput!
    """
    Unique document search
    """
    where: CtaSectionWhereUniqueInput!
}

input CtaSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: CtaSectionCreateInput!
    """
    Update document if it exists
    """
    update: CtaSectionUpdateInput!
}

input CtaSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: CtaSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: CtaSectionWhereUniqueInput!
}

input CtaSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: CtaSectionUpsertInput!
    """
    Unique document search
    """
    where: CtaSectionWhereUniqueInput!
}

"""
Identifies documents
"""
input CtaSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [CtaSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [CtaSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [CtaSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    actions_every: ActionWhereInput
    actions_none: ActionWhereInput
    actions_some: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References CtaSection record uniquely
"""
input CtaSectionWhereUniqueInput {
    id: ID
}

"""
A date string, such as 2007-12-03 (YYYY-MM-DD), compliant with ISO 8601 standard for representation of dates using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the date-timeformat outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representationof dates and times using the Gregorian calendar.
"""
scalar DateTime

enum DocumentFileTypes {
    """
    Automatically selects the best format for the image based on the browser's capabilities.
    """
    autoImage
    avif
    bmp
    gif
    heic
    jpg
    png
    svg
    tiff
    webp
}

input DocumentOutputInput {
    """
    Transforms a document into a desired file type.
    See this matrix for format support:

    JPG:	autoImage, bmp, gif, jpg, png, webp, tiff
    PNG:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
    SVG:	autoImage, bmp, gif, jpg, png, webp, tiff
    WEBP:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
    GIF:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
    TIFF:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
    AVIF:	autoImage, bmp, gif, jpg, png, webp, tiff, svg
    PDF: 	autoImage, gif, jpg, png, webp, tiff
    """
    format: DocumentFileTypes
}

"""
Transformations for Documents
"""
input DocumentTransformationInput {
    """
    Changes the output for the file.
    """
    output: DocumentOutputInput
}

type DocumentVersion {
    createdAt: DateTime!
    data: Json
    id: ID!
    revision: Int!
    stage: Stage!
}

"""
An object with an ID
"""
interface Entity {
    """
    The id of the object.
    """
    id: ID!
    """
    The Stage of an object
    """
    stage: Stage!
}

"""
This enumeration holds all typenames that implement the Entity interface. Components and models implement the Entity interface.
"""
enum EntityTypeName {
    Action
    """
    Asset system model
    """
    Asset
    ContactUsSection
    CtaSection
    FeatureItem
    FeaturesSection
    Footer
    FooterLinksColumn
    HeroSection
    """
    A page with list of different sections
    """
    LandingPage
    Link
    LogoItem
    LogosSection
    NavigationBar
    Person
    PostPage
    PricingPlan
    PricingSection
    """
    Scheduled Operation system model
    """
    ScheduledOperation
    """
    Scheduled Release system model
    """
    ScheduledRelease
    SiteConfig
    """
    Social icon link component used in team section.
    """
    SocialIconLink
    TeamSection
    """
    User system model
    """
    User
}

"""
Allows to specify input to query models and components directly
"""
input EntityWhereInput {
    """
    The ID of an object
    """
    id: ID!
    locale: Locale
    stage: Stage!
    """
    The Type name of an object
    """
    typename: EntityTypeName!
}

type FeatureItem implements Entity {
    content: String
    """
    The icon must match one of the icon names from flaticon.com, e.g., "fi-brands-instagram".
    """
    icon: String
    """
    The unique identifier
    """
    id: ID!
    """
    System stage field
    """
    stage: Stage!
    title: String
}

input FeatureItemConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: FeatureItemWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type FeatureItemConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [FeatureItemEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input FeatureItemCreateInput {
    content: String
    icon: String
    title: String
}

input FeatureItemCreateManyInlineInput {
    """
    Create and connect multiple existing FeatureItem documents
    """
    create: [FeatureItemCreateInput!]
}

input FeatureItemCreateOneInlineInput {
    """
    Create and connect one FeatureItem document
    """
    create: FeatureItemCreateInput
}

input FeatureItemCreateWithPositionInput {
    """
    Document to create
    """
    data: FeatureItemCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type FeatureItemEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: FeatureItem!
}

"""
Identifies documents
"""
input FeatureItemManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FeatureItemWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FeatureItemWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FeatureItemWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    content: String
    """
    All values containing the given string.
    """
    content_contains: String
    """
    All values ending with the given string.
    """
    content_ends_with: String
    """
    All values that are contained in given list.
    """
    content_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    content_not: String
    """
    All values not containing the given string.
    """
    content_not_contains: String
    """
    All values not ending with the given string
    """
    content_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    content_not_in: [String]
    """
    All values not starting with the given string.
    """
    content_not_starts_with: String
    """
    All values starting with the given string.
    """
    content_starts_with: String
    icon: String
    """
    All values containing the given string.
    """
    icon_contains: String
    """
    All values ending with the given string.
    """
    icon_ends_with: String
    """
    All values that are contained in given list.
    """
    icon_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    icon_not: String
    """
    All values not containing the given string.
    """
    icon_not_contains: String
    """
    All values not ending with the given string
    """
    icon_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    icon_not_in: [String]
    """
    All values not starting with the given string.
    """
    icon_not_starts_with: String
    """
    All values starting with the given string.
    """
    icon_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum FeatureItemOrderByInput {
    content_ASC
    content_DESC
    icon_ASC
    icon_DESC
    id_ASC
    id_DESC
    title_ASC
    title_DESC
}

union FeatureItemParent = FeaturesSection

input FeatureItemParentConnectInput {
    FeaturesSection: FeaturesSectionConnectInput
}

input FeatureItemParentCreateInput {
    FeaturesSection: FeaturesSectionCreateInput
}

input FeatureItemParentCreateManyInlineInput {
    """
    Create and connect multiple existing FeatureItemParent documents
    """
    create: [FeatureItemParentCreateInput!]
}

input FeatureItemParentCreateOneInlineInput {
    """
    Create and connect one FeatureItemParent document
    """
    create: FeatureItemParentCreateInput
}

input FeatureItemParentCreateWithPositionInput {
    FeaturesSection: FeaturesSectionCreateWithPositionInput
}

input FeatureItemParentUpdateInput {
    FeaturesSection: FeaturesSectionUpdateInput
}

input FeatureItemParentUpdateManyInlineInput {
    """
    Create and connect multiple FeatureItemParent component instances
    """
    create: [FeatureItemParentCreateWithPositionInput!]
    """
    Delete multiple FeatureItemParent documents
    """
    delete: [FeatureItemParentWhereUniqueInput!]
    """
    Update multiple FeatureItemParent component instances
    """
    update: [FeatureItemParentUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple FeatureItemParent component instances
    """
    upsert: [FeatureItemParentUpsertWithNestedWhereUniqueAndPositionInput!]
}

input FeatureItemParentUpdateManyWithNestedWhereInput {
    FeaturesSection: FeaturesSectionUpdateManyWithNestedWhereInput
}

input FeatureItemParentUpdateOneInlineInput {
    """
    Create and connect one FeatureItemParent document
    """
    create: FeatureItemParentCreateInput
    """
    Delete currently connected FeatureItemParent document
    """
    delete: Boolean
    """
    Update single FeatureItemParent document
    """
    update: FeatureItemParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single FeatureItemParent document
    """
    upsert: FeatureItemParentUpsertWithNestedWhereUniqueInput
}

input FeatureItemParentUpdateWithNestedWhereUniqueAndPositionInput {
    FeaturesSection: FeaturesSectionUpdateWithNestedWhereUniqueAndPositionInput
}

input FeatureItemParentUpdateWithNestedWhereUniqueInput {
    FeaturesSection: FeaturesSectionUpdateWithNestedWhereUniqueInput
}

input FeatureItemParentUpsertWithNestedWhereUniqueAndPositionInput {
    FeaturesSection: FeaturesSectionUpsertWithNestedWhereUniqueAndPositionInput
}

input FeatureItemParentUpsertWithNestedWhereUniqueInput {
    FeaturesSection: FeaturesSectionUpsertWithNestedWhereUniqueInput
}

input FeatureItemParentWhereInput {
    FeaturesSection: FeaturesSectionWhereInput
}

input FeatureItemParentWhereUniqueInput {
    FeaturesSection: FeaturesSectionWhereUniqueInput
}

input FeatureItemUpdateInput {
    content: String
    icon: String
    title: String
}

input FeatureItemUpdateManyInlineInput {
    """
    Create and connect multiple FeatureItem component instances
    """
    create: [FeatureItemCreateWithPositionInput!]
    """
    Delete multiple FeatureItem documents
    """
    delete: [FeatureItemWhereUniqueInput!]
    """
    Update multiple FeatureItem component instances
    """
    update: [FeatureItemUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple FeatureItem component instances
    """
    upsert: [FeatureItemUpsertWithNestedWhereUniqueAndPositionInput!]
}

input FeatureItemUpdateManyInput {
    content: String
    icon: String
    title: String
}

input FeatureItemUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: FeatureItemUpdateManyInput!
    """
    Document search
    """
    where: FeatureItemWhereInput!
}

input FeatureItemUpdateOneInlineInput {
    """
    Create and connect one FeatureItem document
    """
    create: FeatureItemCreateInput
    """
    Delete currently connected FeatureItem document
    """
    delete: Boolean
    """
    Update single FeatureItem document
    """
    update: FeatureItemUpdateWithNestedWhereUniqueInput
    """
    Upsert single FeatureItem document
    """
    upsert: FeatureItemUpsertWithNestedWhereUniqueInput
}

input FeatureItemUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: FeatureItemUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FeatureItemWhereUniqueInput!
}

input FeatureItemUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: FeatureItemUpdateInput!
    """
    Unique document search
    """
    where: FeatureItemWhereUniqueInput!
}

input FeatureItemUpsertInput {
    """
    Create document if it didn't exist
    """
    create: FeatureItemCreateInput!
    """
    Update document if it exists
    """
    update: FeatureItemUpdateInput!
}

input FeatureItemUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: FeatureItemUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FeatureItemWhereUniqueInput!
}

input FeatureItemUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: FeatureItemUpsertInput!
    """
    Unique document search
    """
    where: FeatureItemWhereUniqueInput!
}

"""
Identifies documents
"""
input FeatureItemWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FeatureItemWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FeatureItemWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FeatureItemWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    content: String
    """
    All values containing the given string.
    """
    content_contains: String
    """
    All values ending with the given string.
    """
    content_ends_with: String
    """
    All values that are contained in given list.
    """
    content_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    content_not: String
    """
    All values not containing the given string.
    """
    content_not_contains: String
    """
    All values not ending with the given string
    """
    content_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    content_not_in: [String]
    """
    All values not starting with the given string.
    """
    content_not_starts_with: String
    """
    All values starting with the given string.
    """
    content_starts_with: String
    icon: String
    """
    All values containing the given string.
    """
    icon_contains: String
    """
    All values ending with the given string.
    """
    icon_ends_with: String
    """
    All values that are contained in given list.
    """
    icon_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    icon_not: String
    """
    All values not containing the given string.
    """
    icon_not_contains: String
    """
    All values not ending with the given string
    """
    icon_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    icon_not_in: [String]
    """
    All values not starting with the given string.
    """
    icon_not_starts_with: String
    """
    All values starting with the given string.
    """
    icon_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References FeatureItem record uniquely
"""
input FeatureItemWhereUniqueInput {
    id: ID
}

type FeaturesSection implements Entity {
    features(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `features` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `features` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: FeatureItemOrderByInput
        skip: Int
        where: FeatureItemWhereInput
    ): [FeatureItem!]!
    """
    The unique identifier
    """
    id: ID!
    """
    System stage field
    """
    stage: Stage!
    """
    The subtitle is shown under the section's title.
    """
    subtitle: String
    """
    The section's title.
    """
    title: String
}

input FeaturesSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: FeaturesSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type FeaturesSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [FeaturesSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input FeaturesSectionCreateInput {
    features: FeatureItemCreateManyInlineInput
    subtitle: String
    title: String
}

input FeaturesSectionCreateManyInlineInput {
    """
    Create and connect multiple existing FeaturesSection documents
    """
    create: [FeaturesSectionCreateInput!]
}

input FeaturesSectionCreateOneInlineInput {
    """
    Create and connect one FeaturesSection document
    """
    create: FeaturesSectionCreateInput
}

input FeaturesSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: FeaturesSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type FeaturesSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: FeaturesSection!
}

"""
Identifies documents
"""
input FeaturesSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FeaturesSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FeaturesSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FeaturesSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    features_every: FeatureItemWhereInput
    features_none: FeatureItemWhereInput
    features_some: FeatureItemWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum FeaturesSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union FeaturesSectionParent = LandingPage

input FeaturesSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input FeaturesSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input FeaturesSectionParentCreateManyInlineInput {
    """
    Connect multiple existing FeaturesSectionParent documents
    """
    connect: [FeaturesSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing FeaturesSectionParent documents
    """
    create: [FeaturesSectionParentCreateInput!]
}

input FeaturesSectionParentCreateOneInlineInput {
    """
    Connect one existing FeaturesSectionParent document
    """
    connect: FeaturesSectionParentWhereUniqueInput
    """
    Create and connect one FeaturesSectionParent document
    """
    create: FeaturesSectionParentCreateInput
}

input FeaturesSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input FeaturesSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing FeaturesSectionParent documents
    """
    connect: [FeaturesSectionParentConnectInput!]
    """
    Create and connect multiple FeaturesSectionParent documents
    """
    create: [FeaturesSectionParentCreateInput!]
    """
    Delete multiple FeaturesSectionParent documents
    """
    delete: [FeaturesSectionParentWhereUniqueInput!]
    """
    Disconnect multiple FeaturesSectionParent documents
    """
    disconnect: [FeaturesSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing FeaturesSectionParent documents
    """
    set: [FeaturesSectionParentWhereUniqueInput!]
    """
    Update multiple FeaturesSectionParent documents
    """
    update: [FeaturesSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple FeaturesSectionParent documents
    """
    upsert: [FeaturesSectionParentUpsertWithNestedWhereUniqueInput!]
}

input FeaturesSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input FeaturesSectionParentUpdateOneInlineInput {
    """
    Connect existing FeaturesSectionParent document
    """
    connect: FeaturesSectionParentWhereUniqueInput
    """
    Create and connect one FeaturesSectionParent document
    """
    create: FeaturesSectionParentCreateInput
    """
    Delete currently connected FeaturesSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected FeaturesSectionParent document
    """
    disconnect: Boolean
    """
    Update single FeaturesSectionParent document
    """
    update: FeaturesSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single FeaturesSectionParent document
    """
    upsert: FeaturesSectionParentUpsertWithNestedWhereUniqueInput
}

input FeaturesSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input FeaturesSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input FeaturesSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input FeaturesSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input FeaturesSectionUpdateInput {
    features: FeatureItemUpdateManyInlineInput
    subtitle: String
    title: String
}

input FeaturesSectionUpdateManyInlineInput {
    """
    Create and connect multiple FeaturesSection component instances
    """
    create: [FeaturesSectionCreateWithPositionInput!]
    """
    Delete multiple FeaturesSection documents
    """
    delete: [FeaturesSectionWhereUniqueInput!]
    """
    Update multiple FeaturesSection component instances
    """
    update: [FeaturesSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple FeaturesSection component instances
    """
    upsert: [FeaturesSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input FeaturesSectionUpdateManyInput {
    subtitle: String
    title: String
}

input FeaturesSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: FeaturesSectionUpdateManyInput!
    """
    Document search
    """
    where: FeaturesSectionWhereInput!
}

input FeaturesSectionUpdateOneInlineInput {
    """
    Create and connect one FeaturesSection document
    """
    create: FeaturesSectionCreateInput
    """
    Delete currently connected FeaturesSection document
    """
    delete: Boolean
    """
    Update single FeaturesSection document
    """
    update: FeaturesSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single FeaturesSection document
    """
    upsert: FeaturesSectionUpsertWithNestedWhereUniqueInput
}

input FeaturesSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: FeaturesSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FeaturesSectionWhereUniqueInput!
}

input FeaturesSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: FeaturesSectionUpdateInput!
    """
    Unique document search
    """
    where: FeaturesSectionWhereUniqueInput!
}

input FeaturesSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: FeaturesSectionCreateInput!
    """
    Update document if it exists
    """
    update: FeaturesSectionUpdateInput!
}

input FeaturesSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: FeaturesSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FeaturesSectionWhereUniqueInput!
}

input FeaturesSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: FeaturesSectionUpsertInput!
    """
    Unique document search
    """
    where: FeaturesSectionWhereUniqueInput!
}

"""
Identifies documents
"""
input FeaturesSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FeaturesSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FeaturesSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FeaturesSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    features_every: FeatureItemWhereInput
    features_none: FeatureItemWhereInput
    features_some: FeatureItemWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References FeaturesSection record uniquely
"""
input FeaturesSectionWhereUniqueInput {
    id: ID
}

type Footer implements Entity {
    copyright: String
    """
    The unique identifier
    """
    id: ID!
    linkColumns(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `linkColumns` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `linkColumns` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: FooterLinksColumnOrderByInput
        skip: Int
        where: FooterLinksColumnWhereInput
    ): [FooterLinksColumn!]!
    socialIconLinks(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `socialIconLinks` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `socialIconLinks` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: SocialIconLinkOrderByInput
        skip: Int
        where: SocialIconLinkWhereInput
    ): [SocialIconLink!]!
    """
    System stage field
    """
    stage: Stage!
}

input FooterConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: FooterWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type FooterConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [FooterEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input FooterCreateInput {
    copyright: String
    linkColumns: FooterLinksColumnCreateManyInlineInput
    socialIconLinks: SocialIconLinkCreateManyInlineInput
}

input FooterCreateManyInlineInput {
    """
    Create and connect multiple existing Footer documents
    """
    create: [FooterCreateInput!]
}

input FooterCreateOneInlineInput {
    """
    Create and connect one Footer document
    """
    create: FooterCreateInput
}

input FooterCreateWithPositionInput {
    """
    Document to create
    """
    data: FooterCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type FooterEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: Footer!
}

type FooterLinksColumn implements Entity {
    """
    The unique identifier
    """
    id: ID!
    label: String!
    links(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `links` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `links` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: LinkOrderByInput
        skip: Int
        where: LinkWhereInput
    ): [Link!]!
    """
    System stage field
    """
    stage: Stage!
}

input FooterLinksColumnConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: FooterLinksColumnWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type FooterLinksColumnConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [FooterLinksColumnEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input FooterLinksColumnCreateInput {
    label: String!
    links: LinkCreateManyInlineInput
}

input FooterLinksColumnCreateManyInlineInput {
    """
    Create and connect multiple existing FooterLinksColumn documents
    """
    create: [FooterLinksColumnCreateInput!]
}

input FooterLinksColumnCreateOneInlineInput {
    """
    Create and connect one FooterLinksColumn document
    """
    create: FooterLinksColumnCreateInput
}

input FooterLinksColumnCreateWithPositionInput {
    """
    Document to create
    """
    data: FooterLinksColumnCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type FooterLinksColumnEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: FooterLinksColumn!
}

"""
Identifies documents
"""
input FooterLinksColumnManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FooterLinksColumnWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FooterLinksColumnWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FooterLinksColumnWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    links_every: LinkWhereInput
    links_none: LinkWhereInput
    links_some: LinkWhereInput
}

enum FooterLinksColumnOrderByInput {
    id_ASC
    id_DESC
    label_ASC
    label_DESC
}

union FooterLinksColumnParent = Footer

input FooterLinksColumnParentConnectInput {
    Footer: FooterConnectInput
}

input FooterLinksColumnParentCreateInput {
    Footer: FooterCreateInput
}

input FooterLinksColumnParentCreateManyInlineInput {
    """
    Create and connect multiple existing FooterLinksColumnParent documents
    """
    create: [FooterLinksColumnParentCreateInput!]
}

input FooterLinksColumnParentCreateOneInlineInput {
    """
    Create and connect one FooterLinksColumnParent document
    """
    create: FooterLinksColumnParentCreateInput
}

input FooterLinksColumnParentCreateWithPositionInput {
    Footer: FooterCreateWithPositionInput
}

input FooterLinksColumnParentUpdateInput {
    Footer: FooterUpdateInput
}

input FooterLinksColumnParentUpdateManyInlineInput {
    """
    Create and connect multiple FooterLinksColumnParent component instances
    """
    create: [FooterLinksColumnParentCreateWithPositionInput!]
    """
    Delete multiple FooterLinksColumnParent documents
    """
    delete: [FooterLinksColumnParentWhereUniqueInput!]
    """
    Update multiple FooterLinksColumnParent component instances
    """
    update: [FooterLinksColumnParentUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple FooterLinksColumnParent component instances
    """
    upsert: [FooterLinksColumnParentUpsertWithNestedWhereUniqueAndPositionInput!]
}

input FooterLinksColumnParentUpdateManyWithNestedWhereInput {
    Footer: FooterUpdateManyWithNestedWhereInput
}

input FooterLinksColumnParentUpdateOneInlineInput {
    """
    Create and connect one FooterLinksColumnParent document
    """
    create: FooterLinksColumnParentCreateInput
    """
    Delete currently connected FooterLinksColumnParent document
    """
    delete: Boolean
    """
    Update single FooterLinksColumnParent document
    """
    update: FooterLinksColumnParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single FooterLinksColumnParent document
    """
    upsert: FooterLinksColumnParentUpsertWithNestedWhereUniqueInput
}

input FooterLinksColumnParentUpdateWithNestedWhereUniqueAndPositionInput {
    Footer: FooterUpdateWithNestedWhereUniqueAndPositionInput
}

input FooterLinksColumnParentUpdateWithNestedWhereUniqueInput {
    Footer: FooterUpdateWithNestedWhereUniqueInput
}

input FooterLinksColumnParentUpsertWithNestedWhereUniqueAndPositionInput {
    Footer: FooterUpsertWithNestedWhereUniqueAndPositionInput
}

input FooterLinksColumnParentUpsertWithNestedWhereUniqueInput {
    Footer: FooterUpsertWithNestedWhereUniqueInput
}

input FooterLinksColumnParentWhereInput {
    Footer: FooterWhereInput
}

input FooterLinksColumnParentWhereUniqueInput {
    Footer: FooterWhereUniqueInput
}

input FooterLinksColumnUpdateInput {
    label: String
    links: LinkUpdateManyInlineInput
}

input FooterLinksColumnUpdateManyInlineInput {
    """
    Create and connect multiple FooterLinksColumn component instances
    """
    create: [FooterLinksColumnCreateWithPositionInput!]
    """
    Delete multiple FooterLinksColumn documents
    """
    delete: [FooterLinksColumnWhereUniqueInput!]
    """
    Update multiple FooterLinksColumn component instances
    """
    update: [FooterLinksColumnUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple FooterLinksColumn component instances
    """
    upsert: [FooterLinksColumnUpsertWithNestedWhereUniqueAndPositionInput!]
}

input FooterLinksColumnUpdateManyInput {
    label: String
}

input FooterLinksColumnUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: FooterLinksColumnUpdateManyInput!
    """
    Document search
    """
    where: FooterLinksColumnWhereInput!
}

input FooterLinksColumnUpdateOneInlineInput {
    """
    Create and connect one FooterLinksColumn document
    """
    create: FooterLinksColumnCreateInput
    """
    Delete currently connected FooterLinksColumn document
    """
    delete: Boolean
    """
    Update single FooterLinksColumn document
    """
    update: FooterLinksColumnUpdateWithNestedWhereUniqueInput
    """
    Upsert single FooterLinksColumn document
    """
    upsert: FooterLinksColumnUpsertWithNestedWhereUniqueInput
}

input FooterLinksColumnUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: FooterLinksColumnUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FooterLinksColumnWhereUniqueInput!
}

input FooterLinksColumnUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: FooterLinksColumnUpdateInput!
    """
    Unique document search
    """
    where: FooterLinksColumnWhereUniqueInput!
}

input FooterLinksColumnUpsertInput {
    """
    Create document if it didn't exist
    """
    create: FooterLinksColumnCreateInput!
    """
    Update document if it exists
    """
    update: FooterLinksColumnUpdateInput!
}

input FooterLinksColumnUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: FooterLinksColumnUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FooterLinksColumnWhereUniqueInput!
}

input FooterLinksColumnUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: FooterLinksColumnUpsertInput!
    """
    Unique document search
    """
    where: FooterLinksColumnWhereUniqueInput!
}

"""
Identifies documents
"""
input FooterLinksColumnWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FooterLinksColumnWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FooterLinksColumnWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FooterLinksColumnWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    links_every: LinkWhereInput
    links_none: LinkWhereInput
    links_some: LinkWhereInput
}

"""
References FooterLinksColumn record uniquely
"""
input FooterLinksColumnWhereUniqueInput {
    id: ID
}

"""
Identifies documents
"""
input FooterManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FooterWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FooterWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FooterWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    copyright: String
    """
    All values containing the given string.
    """
    copyright_contains: String
    """
    All values ending with the given string.
    """
    copyright_ends_with: String
    """
    All values that are contained in given list.
    """
    copyright_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    copyright_not: String
    """
    All values not containing the given string.
    """
    copyright_not_contains: String
    """
    All values not ending with the given string
    """
    copyright_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    copyright_not_in: [String]
    """
    All values not starting with the given string.
    """
    copyright_not_starts_with: String
    """
    All values starting with the given string.
    """
    copyright_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    linkColumns_every: FooterLinksColumnWhereInput
    linkColumns_none: FooterLinksColumnWhereInput
    linkColumns_some: FooterLinksColumnWhereInput
    socialIconLinks_every: SocialIconLinkWhereInput
    socialIconLinks_none: SocialIconLinkWhereInput
    socialIconLinks_some: SocialIconLinkWhereInput
}

enum FooterOrderByInput {
    copyright_ASC
    copyright_DESC
    id_ASC
    id_DESC
}

union FooterParent = SiteConfig

input FooterParentConnectInput {
    SiteConfig: SiteConfigConnectInput
}

input FooterParentCreateInput {
    SiteConfig: SiteConfigCreateInput
}

input FooterParentCreateManyInlineInput {
    """
    Connect multiple existing FooterParent documents
    """
    connect: [FooterParentWhereUniqueInput!]
    """
    Create and connect multiple existing FooterParent documents
    """
    create: [FooterParentCreateInput!]
}

input FooterParentCreateOneInlineInput {
    """
    Connect one existing FooterParent document
    """
    connect: FooterParentWhereUniqueInput
    """
    Create and connect one FooterParent document
    """
    create: FooterParentCreateInput
}

input FooterParentUpdateInput {
    SiteConfig: SiteConfigUpdateInput
}

input FooterParentUpdateManyInlineInput {
    """
    Connect multiple existing FooterParent documents
    """
    connect: [FooterParentConnectInput!]
    """
    Create and connect multiple FooterParent documents
    """
    create: [FooterParentCreateInput!]
    """
    Delete multiple FooterParent documents
    """
    delete: [FooterParentWhereUniqueInput!]
    """
    Disconnect multiple FooterParent documents
    """
    disconnect: [FooterParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing FooterParent documents
    """
    set: [FooterParentWhereUniqueInput!]
    """
    Update multiple FooterParent documents
    """
    update: [FooterParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple FooterParent documents
    """
    upsert: [FooterParentUpsertWithNestedWhereUniqueInput!]
}

input FooterParentUpdateManyWithNestedWhereInput {
    SiteConfig: SiteConfigUpdateManyWithNestedWhereInput
}

input FooterParentUpdateOneInlineInput {
    """
    Connect existing FooterParent document
    """
    connect: FooterParentWhereUniqueInput
    """
    Create and connect one FooterParent document
    """
    create: FooterParentCreateInput
    """
    Delete currently connected FooterParent document
    """
    delete: Boolean
    """
    Disconnect currently connected FooterParent document
    """
    disconnect: Boolean
    """
    Update single FooterParent document
    """
    update: FooterParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single FooterParent document
    """
    upsert: FooterParentUpsertWithNestedWhereUniqueInput
}

input FooterParentUpdateWithNestedWhereUniqueInput {
    SiteConfig: SiteConfigUpdateWithNestedWhereUniqueInput
}

input FooterParentUpsertWithNestedWhereUniqueInput {
    SiteConfig: SiteConfigUpsertWithNestedWhereUniqueInput
}

input FooterParentWhereInput {
    SiteConfig: SiteConfigWhereInput
}

input FooterParentWhereUniqueInput {
    SiteConfig: SiteConfigWhereUniqueInput
}

input FooterUpdateInput {
    copyright: String
    linkColumns: FooterLinksColumnUpdateManyInlineInput
    socialIconLinks: SocialIconLinkUpdateManyInlineInput
}

input FooterUpdateManyInlineInput {
    """
    Create and connect multiple Footer component instances
    """
    create: [FooterCreateWithPositionInput!]
    """
    Delete multiple Footer documents
    """
    delete: [FooterWhereUniqueInput!]
    """
    Update multiple Footer component instances
    """
    update: [FooterUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple Footer component instances
    """
    upsert: [FooterUpsertWithNestedWhereUniqueAndPositionInput!]
}

input FooterUpdateManyInput {
    copyright: String
}

input FooterUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: FooterUpdateManyInput!
    """
    Document search
    """
    where: FooterWhereInput!
}

input FooterUpdateOneInlineInput {
    """
    Create and connect one Footer document
    """
    create: FooterCreateInput
    """
    Delete currently connected Footer document
    """
    delete: Boolean
    """
    Update single Footer document
    """
    update: FooterUpdateWithNestedWhereUniqueInput
    """
    Upsert single Footer document
    """
    upsert: FooterUpsertWithNestedWhereUniqueInput
}

input FooterUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: FooterUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FooterWhereUniqueInput!
}

input FooterUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: FooterUpdateInput!
    """
    Unique document search
    """
    where: FooterWhereUniqueInput!
}

input FooterUpsertInput {
    """
    Create document if it didn't exist
    """
    create: FooterCreateInput!
    """
    Update document if it exists
    """
    update: FooterUpdateInput!
}

input FooterUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: FooterUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: FooterWhereUniqueInput!
}

input FooterUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: FooterUpsertInput!
    """
    Unique document search
    """
    where: FooterWhereUniqueInput!
}

"""
Identifies documents
"""
input FooterWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [FooterWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [FooterWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [FooterWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    copyright: String
    """
    All values containing the given string.
    """
    copyright_contains: String
    """
    All values ending with the given string.
    """
    copyright_ends_with: String
    """
    All values that are contained in given list.
    """
    copyright_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    copyright_not: String
    """
    All values not containing the given string.
    """
    copyright_not_contains: String
    """
    All values not ending with the given string
    """
    copyright_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    copyright_not_in: [String]
    """
    All values not starting with the given string.
    """
    copyright_not_starts_with: String
    """
    All values starting with the given string.
    """
    copyright_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    linkColumns_every: FooterLinksColumnWhereInput
    linkColumns_none: FooterLinksColumnWhereInput
    linkColumns_some: FooterLinksColumnWhereInput
    socialIconLinks_every: SocialIconLinkWhereInput
    socialIconLinks_none: SocialIconLinkWhereInput
    socialIconLinks_some: SocialIconLinkWhereInput
}

"""
References Footer record uniquely
"""
input FooterWhereUniqueInput {
    id: ID
}

type HeroSection implements Entity {
    actions(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `actions` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `actions` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: ActionOrderByInput
        skip: Int
        where: ActionWhereInput
    ): [Action!]!
    """
    The unique identifier
    """
    id: ID!
    image(
        """
        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        where: AssetSingleRelationWhereInput
    ): Asset
    """
    System stage field
    """
    stage: Stage!
    subtitle: String
    """
    The section's title.
    """
    title: String
}

input HeroSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: HeroSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type HeroSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [HeroSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input HeroSectionCreateInput {
    actions: ActionCreateManyInlineInput
    image: AssetCreateOneInlineInput
    subtitle: String
    title: String
}

input HeroSectionCreateManyInlineInput {
    """
    Create and connect multiple existing HeroSection documents
    """
    create: [HeroSectionCreateInput!]
}

input HeroSectionCreateOneInlineInput {
    """
    Create and connect one HeroSection document
    """
    create: HeroSectionCreateInput
}

input HeroSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: HeroSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type HeroSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: HeroSection!
}

"""
Identifies documents
"""
input HeroSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [HeroSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [HeroSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [HeroSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    actions_every: ActionWhereInput
    actions_none: ActionWhereInput
    actions_some: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    image: AssetWhereInput
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum HeroSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union HeroSectionParent = LandingPage

input HeroSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input HeroSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input HeroSectionParentCreateManyInlineInput {
    """
    Connect multiple existing HeroSectionParent documents
    """
    connect: [HeroSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing HeroSectionParent documents
    """
    create: [HeroSectionParentCreateInput!]
}

input HeroSectionParentCreateOneInlineInput {
    """
    Connect one existing HeroSectionParent document
    """
    connect: HeroSectionParentWhereUniqueInput
    """
    Create and connect one HeroSectionParent document
    """
    create: HeroSectionParentCreateInput
}

input HeroSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input HeroSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing HeroSectionParent documents
    """
    connect: [HeroSectionParentConnectInput!]
    """
    Create and connect multiple HeroSectionParent documents
    """
    create: [HeroSectionParentCreateInput!]
    """
    Delete multiple HeroSectionParent documents
    """
    delete: [HeroSectionParentWhereUniqueInput!]
    """
    Disconnect multiple HeroSectionParent documents
    """
    disconnect: [HeroSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing HeroSectionParent documents
    """
    set: [HeroSectionParentWhereUniqueInput!]
    """
    Update multiple HeroSectionParent documents
    """
    update: [HeroSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple HeroSectionParent documents
    """
    upsert: [HeroSectionParentUpsertWithNestedWhereUniqueInput!]
}

input HeroSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input HeroSectionParentUpdateOneInlineInput {
    """
    Connect existing HeroSectionParent document
    """
    connect: HeroSectionParentWhereUniqueInput
    """
    Create and connect one HeroSectionParent document
    """
    create: HeroSectionParentCreateInput
    """
    Delete currently connected HeroSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected HeroSectionParent document
    """
    disconnect: Boolean
    """
    Update single HeroSectionParent document
    """
    update: HeroSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single HeroSectionParent document
    """
    upsert: HeroSectionParentUpsertWithNestedWhereUniqueInput
}

input HeroSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input HeroSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input HeroSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input HeroSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input HeroSectionUpdateInput {
    actions: ActionUpdateManyInlineInput
    image: AssetUpdateOneInlineInput
    subtitle: String
    title: String
}

input HeroSectionUpdateManyInlineInput {
    """
    Create and connect multiple HeroSection component instances
    """
    create: [HeroSectionCreateWithPositionInput!]
    """
    Delete multiple HeroSection documents
    """
    delete: [HeroSectionWhereUniqueInput!]
    """
    Update multiple HeroSection component instances
    """
    update: [HeroSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple HeroSection component instances
    """
    upsert: [HeroSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input HeroSectionUpdateManyInput {
    subtitle: String
    title: String
}

input HeroSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: HeroSectionUpdateManyInput!
    """
    Document search
    """
    where: HeroSectionWhereInput!
}

input HeroSectionUpdateOneInlineInput {
    """
    Create and connect one HeroSection document
    """
    create: HeroSectionCreateInput
    """
    Delete currently connected HeroSection document
    """
    delete: Boolean
    """
    Update single HeroSection document
    """
    update: HeroSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single HeroSection document
    """
    upsert: HeroSectionUpsertWithNestedWhereUniqueInput
}

input HeroSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: HeroSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: HeroSectionWhereUniqueInput!
}

input HeroSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: HeroSectionUpdateInput!
    """
    Unique document search
    """
    where: HeroSectionWhereUniqueInput!
}

input HeroSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: HeroSectionCreateInput!
    """
    Update document if it exists
    """
    update: HeroSectionUpdateInput!
}

input HeroSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: HeroSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: HeroSectionWhereUniqueInput!
}

input HeroSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: HeroSectionUpsertInput!
    """
    Unique document search
    """
    where: HeroSectionWhereUniqueInput!
}

"""
Identifies documents
"""
input HeroSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [HeroSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [HeroSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [HeroSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    actions_every: ActionWhereInput
    actions_none: ActionWhereInput
    actions_some: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    image: AssetWhereInput
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References HeroSection record uniquely
"""
input HeroSectionWhereUniqueInput {
    id: ID
}

scalar Hex

"""
The position of the icon relative to the label in the Action component.
"""
enum IconPosition {
    left
    right
}

input ImageBlurInput {
    """
    The amount of blurring to apply to the image. The value must be an integer from 1 to 20.
    """
    amount: Int!
}

"""
Adds a border to the image.
"""
input ImageBorderInput {
    """
    The background color of the border. The value must be a valid hex color code. Or one of the supported color names.
    """
    background: String!
    """
    The color of the border. The value must be a valid hex color code. Or one of the supported color names.
    """
    color: String!
    """
    The width of the border in pixels. The value must be an integer from 1 to 1000.
    """
    width: Int!
}

input ImageCompressInput {
    """
    Preserves the metadata of the image.
    """
    metadata: Boolean!
}

"""
Crops the image to the specified dimensions.
The starting points for X and Y coordinates are [0,0], aligning with the top-left corner of the image.
The width and height parameters determine the size in pixels of the cropping rectangle.
The output will include only the portion of the image within the designated crop area.
"""
input ImageCropInput {
    """
    The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
    """
    height: Int!
    """
    The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
    """
    width: Int!
    """
    The x coordinate of the image. The value must be an integer from 0 to 10000.
    """
    x: Int!
    """
    The y coordinate of the image. The value must be an integer from 0 to 10000.
    """
    y: Int!
}

enum ImageFit {
    """
    Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio.
    """
    clip
    """
    Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries.
    """
    crop
    """
    Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size.
    """
    max
    """
    Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method.
    """
    scale
}

input ImageQualityInput {
    """
    The quality of the image. The value must be an integer from 1 to 100.
    """
    value: Int!
}

input ImageResizeInput {
    """
    The default value for the fit parameter is fit:clip.
    """
    fit: ImageFit
    """
    The height in pixels to resize the image to. The value must be an integer from 1 to 10000.
    """
    height: Int
    """
    The width in pixels to resize the image to. The value must be an integer from 1 to 10000.
    """
    width: Int
}

input ImageSharpenInput {
    """
    The amount of sharpening to apply to the image. The value must be an integer from 1 to 20.
    """
    amount: Int!
}

"""
Transformations for Images
"""
input ImageTransformationInput {
    """
    Blurs the image.
    """
    blur: ImageBlurInput
    """
    Adds a border to the image.
    """
    border: ImageBorderInput
    """
    Compresses the image.
    """
    compress: ImageCompressInput
    """
    Crops the image to the specified dimensions.
    """
    crop: ImageCropInput
    """
    Changes the quality of the image. The value must be an integer from 1 to 100.
    Only supported for the following formats jpeg, jpg, webp, gif, heif, tiff, avif.
    """
    quality: ImageQualityInput
    """
    Resizes the image
    """
    resize: ImageResizeInput
    """
    Sharpens the image.
    """
    sharpen: ImageSharpenInput
}

"""
Raw JSON value
"""
scalar Json

"""
A page with list of different sections
"""
type LandingPage implements Entity & Node {
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [LandingPage!]!
    """
    List of LandingPage versions
    """
    history(
        limit: Int! = 10
        skip: Int! = 0
        """
        This is optional and can be used to fetch the document version history for a specific stage instead of the current one
        """
        stageOverride: Stage
    ): [Version!]!
    """
    The unique identifier
    """
    id: ID!
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    sections(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `sections` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `sections` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
    ): [LandingPagesectionsUnion!]!
    slug: String!
    """
    System stage field
    """
    stage: Stage!
    title: String!
    """
    The time the document was updated
    """
    updatedAt: DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

input LandingPageConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: LandingPageWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type LandingPageConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [LandingPageEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input LandingPageCreateInput {
    createdAt: DateTime
    sections: LandingPagesectionsUnionCreateManyInlineInput
    slug: String!
    title: String!
    updatedAt: DateTime
}

input LandingPageCreateManyInlineInput {
    """
    Connect multiple existing LandingPage documents
    """
    connect: [LandingPageWhereUniqueInput!]
    """
    Create and connect multiple existing LandingPage documents
    """
    create: [LandingPageCreateInput!]
}

input LandingPageCreateOneInlineInput {
    """
    Connect one existing LandingPage document
    """
    connect: LandingPageWhereUniqueInput
    """
    Create and connect one LandingPage document
    """
    create: LandingPageCreateInput
}

"""
An edge in a connection.
"""
type LandingPageEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: LandingPage!
}

"""
Identifies documents
"""
input LandingPageManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LandingPageWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LandingPageWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LandingPageWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: LandingPageWhereStageInput
    documentInStages_none: LandingPageWhereStageInput
    documentInStages_some: LandingPageWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    """
    All values in which the union is empty.
    """
    sections_empty: Boolean
    """
    Matches if the modular component contains at least one connection to the item provided to the filter
    """
    sections_some: LandingPagesectionsUnionWhereInput
    slug: String
    """
    All values containing the given string.
    """
    slug_contains: String
    """
    All values ending with the given string.
    """
    slug_ends_with: String
    """
    All values that are contained in given list.
    """
    slug_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    slug_not: String
    """
    All values not containing the given string.
    """
    slug_not_contains: String
    """
    All values not ending with the given string
    """
    slug_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    slug_not_in: [String]
    """
    All values not starting with the given string.
    """
    slug_not_starts_with: String
    """
    All values starting with the given string.
    """
    slug_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

enum LandingPageOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input LandingPageUpdateInput {
    sections: LandingPagesectionsUnionUpdateManyInlineInput
    slug: String
    title: String
}

input LandingPageUpdateManyInlineInput {
    """
    Connect multiple existing LandingPage documents
    """
    connect: [LandingPageConnectInput!]
    """
    Create and connect multiple LandingPage documents
    """
    create: [LandingPageCreateInput!]
    """
    Delete multiple LandingPage documents
    """
    delete: [LandingPageWhereUniqueInput!]
    """
    Disconnect multiple LandingPage documents
    """
    disconnect: [LandingPageWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing LandingPage documents
    """
    set: [LandingPageWhereUniqueInput!]
    """
    Update multiple LandingPage documents
    """
    update: [LandingPageUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple LandingPage documents
    """
    upsert: [LandingPageUpsertWithNestedWhereUniqueInput!]
}

input LandingPageUpdateManyInput {
    title: String
}

input LandingPageUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: LandingPageUpdateManyInput!
    """
    Document search
    """
    where: LandingPageWhereInput!
}

input LandingPageUpdateOneInlineInput {
    """
    Connect existing LandingPage document
    """
    connect: LandingPageWhereUniqueInput
    """
    Create and connect one LandingPage document
    """
    create: LandingPageCreateInput
    """
    Delete currently connected LandingPage document
    """
    delete: Boolean
    """
    Disconnect currently connected LandingPage document
    """
    disconnect: Boolean
    """
    Update single LandingPage document
    """
    update: LandingPageUpdateWithNestedWhereUniqueInput
    """
    Upsert single LandingPage document
    """
    upsert: LandingPageUpsertWithNestedWhereUniqueInput
}

input LandingPageUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: LandingPageUpdateInput!
    """
    Unique document search
    """
    where: LandingPageWhereUniqueInput!
}

input LandingPageUpsertInput {
    """
    Create document if it didn't exist
    """
    create: LandingPageCreateInput!
    """
    Update document if it exists
    """
    update: LandingPageUpdateInput!
}

input LandingPageUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: LandingPageUpsertInput!
    """
    Unique document search
    """
    where: LandingPageWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input LandingPageWhereComparatorInput {
    """
    This field can be used to request to check if the entry is outdated by internal comparison
    """
    outdated_to: Boolean
}

"""
Identifies documents
"""
input LandingPageWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LandingPageWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LandingPageWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LandingPageWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: LandingPageWhereStageInput
    documentInStages_none: LandingPageWhereStageInput
    documentInStages_some: LandingPageWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    """
    All values in which the union is empty.
    """
    sections_empty: Boolean
    """
    Matches if the modular component contains at least one connection to the item provided to the filter
    """
    sections_some: LandingPagesectionsUnionWhereInput
    slug: String
    """
    All values containing the given string.
    """
    slug_contains: String
    """
    All values ending with the given string.
    """
    slug_ends_with: String
    """
    All values that are contained in given list.
    """
    slug_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    slug_not: String
    """
    All values not containing the given string.
    """
    slug_not_contains: String
    """
    All values not ending with the given string
    """
    slug_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    slug_not_in: [String]
    """
    All values not starting with the given string.
    """
    slug_not_starts_with: String
    """
    All values starting with the given string.
    """
    slug_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input LandingPageWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [LandingPageWhereStageInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LandingPageWhereStageInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LandingPageWhereStageInput!]
    """
    This field contains fields which can be set as true or false to specify an internal comparison
    """
    compareWithParent: LandingPageWhereComparatorInput
    """
    Specify the stage to compare with
    """
    stage: Stage
}

"""
References LandingPage record uniquely
"""
input LandingPageWhereUniqueInput {
    id: ID
    slug: String
}

union LandingPagesectionsUnion =
    | ContactUsSection
    | CtaSection
    | FeaturesSection
    | HeroSection
    | LogosSection
    | PricingSection
    | TeamSection

input LandingPagesectionsUnionConnectInput {
    ContactUsSection: ContactUsSectionConnectInput
    CtaSection: CtaSectionConnectInput
    FeaturesSection: FeaturesSectionConnectInput
    HeroSection: HeroSectionConnectInput
    LogosSection: LogosSectionConnectInput
    PricingSection: PricingSectionConnectInput
    TeamSection: TeamSectionConnectInput
}

input LandingPagesectionsUnionCreateInput {
    ContactUsSection: ContactUsSectionCreateInput
    CtaSection: CtaSectionCreateInput
    FeaturesSection: FeaturesSectionCreateInput
    HeroSection: HeroSectionCreateInput
    LogosSection: LogosSectionCreateInput
    PricingSection: PricingSectionCreateInput
    TeamSection: TeamSectionCreateInput
}

input LandingPagesectionsUnionCreateManyInlineInput {
    """
    Create and connect multiple existing LandingPagesectionsUnion documents
    """
    create: [LandingPagesectionsUnionCreateInput!]
}

input LandingPagesectionsUnionCreateOneInlineInput {
    """
    Create and connect one LandingPagesectionsUnion document
    """
    create: LandingPagesectionsUnionCreateInput
}

input LandingPagesectionsUnionCreateWithPositionInput {
    ContactUsSection: ContactUsSectionCreateWithPositionInput
    CtaSection: CtaSectionCreateWithPositionInput
    FeaturesSection: FeaturesSectionCreateWithPositionInput
    HeroSection: HeroSectionCreateWithPositionInput
    LogosSection: LogosSectionCreateWithPositionInput
    PricingSection: PricingSectionCreateWithPositionInput
    TeamSection: TeamSectionCreateWithPositionInput
}

input LandingPagesectionsUnionUpdateInput {
    ContactUsSection: ContactUsSectionUpdateInput
    CtaSection: CtaSectionUpdateInput
    FeaturesSection: FeaturesSectionUpdateInput
    HeroSection: HeroSectionUpdateInput
    LogosSection: LogosSectionUpdateInput
    PricingSection: PricingSectionUpdateInput
    TeamSection: TeamSectionUpdateInput
}

input LandingPagesectionsUnionUpdateManyInlineInput {
    """
    Create and connect multiple LandingPagesectionsUnion component instances
    """
    create: [LandingPagesectionsUnionCreateWithPositionInput!]
    """
    Delete multiple LandingPagesectionsUnion documents
    """
    delete: [LandingPagesectionsUnionWhereUniqueInput!]
    """
    Update multiple LandingPagesectionsUnion component instances
    """
    update: [LandingPagesectionsUnionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple LandingPagesectionsUnion component instances
    """
    upsert: [LandingPagesectionsUnionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input LandingPagesectionsUnionUpdateManyWithNestedWhereInput {
    ContactUsSection: ContactUsSectionUpdateManyWithNestedWhereInput
    CtaSection: CtaSectionUpdateManyWithNestedWhereInput
    FeaturesSection: FeaturesSectionUpdateManyWithNestedWhereInput
    HeroSection: HeroSectionUpdateManyWithNestedWhereInput
    LogosSection: LogosSectionUpdateManyWithNestedWhereInput
    PricingSection: PricingSectionUpdateManyWithNestedWhereInput
    TeamSection: TeamSectionUpdateManyWithNestedWhereInput
}

input LandingPagesectionsUnionUpdateOneInlineInput {
    """
    Create and connect one LandingPagesectionsUnion document
    """
    create: LandingPagesectionsUnionCreateInput
    """
    Delete currently connected LandingPagesectionsUnion document
    """
    delete: Boolean
    """
    Update single LandingPagesectionsUnion document
    """
    update: LandingPagesectionsUnionUpdateWithNestedWhereUniqueInput
    """
    Upsert single LandingPagesectionsUnion document
    """
    upsert: LandingPagesectionsUnionUpsertWithNestedWhereUniqueInput
}

input LandingPagesectionsUnionUpdateWithNestedWhereUniqueAndPositionInput {
    ContactUsSection: ContactUsSectionUpdateWithNestedWhereUniqueAndPositionInput
    CtaSection: CtaSectionUpdateWithNestedWhereUniqueAndPositionInput
    FeaturesSection: FeaturesSectionUpdateWithNestedWhereUniqueAndPositionInput
    HeroSection: HeroSectionUpdateWithNestedWhereUniqueAndPositionInput
    LogosSection: LogosSectionUpdateWithNestedWhereUniqueAndPositionInput
    PricingSection: PricingSectionUpdateWithNestedWhereUniqueAndPositionInput
    TeamSection: TeamSectionUpdateWithNestedWhereUniqueAndPositionInput
}

input LandingPagesectionsUnionUpdateWithNestedWhereUniqueInput {
    ContactUsSection: ContactUsSectionUpdateWithNestedWhereUniqueInput
    CtaSection: CtaSectionUpdateWithNestedWhereUniqueInput
    FeaturesSection: FeaturesSectionUpdateWithNestedWhereUniqueInput
    HeroSection: HeroSectionUpdateWithNestedWhereUniqueInput
    LogosSection: LogosSectionUpdateWithNestedWhereUniqueInput
    PricingSection: PricingSectionUpdateWithNestedWhereUniqueInput
    TeamSection: TeamSectionUpdateWithNestedWhereUniqueInput
}

input LandingPagesectionsUnionUpsertWithNestedWhereUniqueAndPositionInput {
    ContactUsSection: ContactUsSectionUpsertWithNestedWhereUniqueAndPositionInput
    CtaSection: CtaSectionUpsertWithNestedWhereUniqueAndPositionInput
    FeaturesSection: FeaturesSectionUpsertWithNestedWhereUniqueAndPositionInput
    HeroSection: HeroSectionUpsertWithNestedWhereUniqueAndPositionInput
    LogosSection: LogosSectionUpsertWithNestedWhereUniqueAndPositionInput
    PricingSection: PricingSectionUpsertWithNestedWhereUniqueAndPositionInput
    TeamSection: TeamSectionUpsertWithNestedWhereUniqueAndPositionInput
}

input LandingPagesectionsUnionUpsertWithNestedWhereUniqueInput {
    ContactUsSection: ContactUsSectionUpsertWithNestedWhereUniqueInput
    CtaSection: CtaSectionUpsertWithNestedWhereUniqueInput
    FeaturesSection: FeaturesSectionUpsertWithNestedWhereUniqueInput
    HeroSection: HeroSectionUpsertWithNestedWhereUniqueInput
    LogosSection: LogosSectionUpsertWithNestedWhereUniqueInput
    PricingSection: PricingSectionUpsertWithNestedWhereUniqueInput
    TeamSection: TeamSectionUpsertWithNestedWhereUniqueInput
}

input LandingPagesectionsUnionWhereInput {
    ContactUsSection: ContactUsSectionWhereInput
    CtaSection: CtaSectionWhereInput
    FeaturesSection: FeaturesSectionWhereInput
    HeroSection: HeroSectionWhereInput
    LogosSection: LogosSectionWhereInput
    PricingSection: PricingSectionWhereInput
    TeamSection: TeamSectionWhereInput
}

input LandingPagesectionsUnionWhereUniqueInput {
    ContactUsSection: ContactUsSectionWhereUniqueInput
    CtaSection: CtaSectionWhereUniqueInput
    FeaturesSection: FeaturesSectionWhereUniqueInput
    HeroSection: HeroSectionWhereUniqueInput
    LogosSection: LogosSectionWhereUniqueInput
    PricingSection: PricingSectionWhereUniqueInput
    TeamSection: TeamSectionWhereUniqueInput
}

type Link implements Entity {
    """
    The unique identifier
    """
    id: ID!
    label: String!
    """
    System stage field
    """
    stage: Stage!
    url: String!
}

input LinkConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: LinkWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type LinkConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [LinkEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input LinkCreateInput {
    label: String!
    url: String!
}

input LinkCreateManyInlineInput {
    """
    Create and connect multiple existing Link documents
    """
    create: [LinkCreateInput!]
}

input LinkCreateOneInlineInput {
    """
    Create and connect one Link document
    """
    create: LinkCreateInput
}

input LinkCreateWithPositionInput {
    """
    Document to create
    """
    data: LinkCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type LinkEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: Link!
}

"""
Identifies documents
"""
input LinkManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LinkWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LinkWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LinkWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

enum LinkOrderByInput {
    id_ASC
    id_DESC
    label_ASC
    label_DESC
    url_ASC
    url_DESC
}

union LinkParent = FooterLinksColumn | NavigationBar

input LinkParentConnectInput {
    FooterLinksColumn: FooterLinksColumnConnectInput
    NavigationBar: NavigationBarConnectInput
}

input LinkParentCreateInput {
    FooterLinksColumn: FooterLinksColumnCreateInput
    NavigationBar: NavigationBarCreateInput
}

input LinkParentCreateManyInlineInput {
    """
    Create and connect multiple existing LinkParent documents
    """
    create: [LinkParentCreateInput!]
}

input LinkParentCreateOneInlineInput {
    """
    Create and connect one LinkParent document
    """
    create: LinkParentCreateInput
}

input LinkParentCreateWithPositionInput {
    FooterLinksColumn: FooterLinksColumnCreateWithPositionInput
    NavigationBar: NavigationBarCreateWithPositionInput
}

input LinkParentUpdateInput {
    FooterLinksColumn: FooterLinksColumnUpdateInput
    NavigationBar: NavigationBarUpdateInput
}

input LinkParentUpdateManyInlineInput {
    """
    Create and connect multiple LinkParent component instances
    """
    create: [LinkParentCreateWithPositionInput!]
    """
    Delete multiple LinkParent documents
    """
    delete: [LinkParentWhereUniqueInput!]
    """
    Update multiple LinkParent component instances
    """
    update: [LinkParentUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple LinkParent component instances
    """
    upsert: [LinkParentUpsertWithNestedWhereUniqueAndPositionInput!]
}

input LinkParentUpdateManyWithNestedWhereInput {
    FooterLinksColumn: FooterLinksColumnUpdateManyWithNestedWhereInput
    NavigationBar: NavigationBarUpdateManyWithNestedWhereInput
}

input LinkParentUpdateOneInlineInput {
    """
    Create and connect one LinkParent document
    """
    create: LinkParentCreateInput
    """
    Delete currently connected LinkParent document
    """
    delete: Boolean
    """
    Update single LinkParent document
    """
    update: LinkParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single LinkParent document
    """
    upsert: LinkParentUpsertWithNestedWhereUniqueInput
}

input LinkParentUpdateWithNestedWhereUniqueAndPositionInput {
    FooterLinksColumn: FooterLinksColumnUpdateWithNestedWhereUniqueAndPositionInput
    NavigationBar: NavigationBarUpdateWithNestedWhereUniqueAndPositionInput
}

input LinkParentUpdateWithNestedWhereUniqueInput {
    FooterLinksColumn: FooterLinksColumnUpdateWithNestedWhereUniqueInput
    NavigationBar: NavigationBarUpdateWithNestedWhereUniqueInput
}

input LinkParentUpsertWithNestedWhereUniqueAndPositionInput {
    FooterLinksColumn: FooterLinksColumnUpsertWithNestedWhereUniqueAndPositionInput
    NavigationBar: NavigationBarUpsertWithNestedWhereUniqueAndPositionInput
}

input LinkParentUpsertWithNestedWhereUniqueInput {
    FooterLinksColumn: FooterLinksColumnUpsertWithNestedWhereUniqueInput
    NavigationBar: NavigationBarUpsertWithNestedWhereUniqueInput
}

input LinkParentWhereInput {
    FooterLinksColumn: FooterLinksColumnWhereInput
    NavigationBar: NavigationBarWhereInput
}

input LinkParentWhereUniqueInput {
    FooterLinksColumn: FooterLinksColumnWhereUniqueInput
    NavigationBar: NavigationBarWhereUniqueInput
}

input LinkUpdateInput {
    label: String
    url: String
}

input LinkUpdateManyInlineInput {
    """
    Create and connect multiple Link component instances
    """
    create: [LinkCreateWithPositionInput!]
    """
    Delete multiple Link documents
    """
    delete: [LinkWhereUniqueInput!]
    """
    Update multiple Link component instances
    """
    update: [LinkUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple Link component instances
    """
    upsert: [LinkUpsertWithNestedWhereUniqueAndPositionInput!]
}

input LinkUpdateManyInput {
    label: String
    url: String
}

input LinkUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: LinkUpdateManyInput!
    """
    Document search
    """
    where: LinkWhereInput!
}

input LinkUpdateOneInlineInput {
    """
    Create and connect one Link document
    """
    create: LinkCreateInput
    """
    Delete currently connected Link document
    """
    delete: Boolean
    """
    Update single Link document
    """
    update: LinkUpdateWithNestedWhereUniqueInput
    """
    Upsert single Link document
    """
    upsert: LinkUpsertWithNestedWhereUniqueInput
}

input LinkUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: LinkUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: LinkWhereUniqueInput!
}

input LinkUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: LinkUpdateInput!
    """
    Unique document search
    """
    where: LinkWhereUniqueInput!
}

input LinkUpsertInput {
    """
    Create document if it didn't exist
    """
    create: LinkCreateInput!
    """
    Update document if it exists
    """
    update: LinkUpdateInput!
}

input LinkUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: LinkUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: LinkWhereUniqueInput!
}

input LinkUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: LinkUpsertInput!
    """
    Unique document search
    """
    where: LinkWhereUniqueInput!
}

"""
Identifies documents
"""
input LinkWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LinkWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LinkWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LinkWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

"""
References Link record uniquely
"""
input LinkWhereUniqueInput {
    id: ID
}

"""
Locale system enumeration
"""
enum Locale {
    """
    System locale
    """
    en
}

"""
Representing a geolocation point with latitude and longitude
"""
type Location {
    distance(from: LocationInput!): Float!
    latitude: Float!
    longitude: Float!
}

"""
Input for a geolocation point with latitude and longitude
"""
input LocationInput {
    latitude: Float!
    longitude: Float!
}

type LogoItem implements Entity {
    """
    The unique identifier
    """
    id: ID!
    image(
        """
        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        where: AssetSingleRelationWhereInput
    ): Asset
    """
    System stage field
    """
    stage: Stage!
    title: String
    url: String
}

input LogoItemConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: LogoItemWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type LogoItemConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [LogoItemEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input LogoItemCreateInput {
    image: AssetCreateOneInlineInput
    title: String
    url: String
}

input LogoItemCreateManyInlineInput {
    """
    Create and connect multiple existing LogoItem documents
    """
    create: [LogoItemCreateInput!]
}

input LogoItemCreateOneInlineInput {
    """
    Create and connect one LogoItem document
    """
    create: LogoItemCreateInput
}

input LogoItemCreateWithPositionInput {
    """
    Document to create
    """
    data: LogoItemCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type LogoItemEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: LogoItem!
}

"""
Identifies documents
"""
input LogoItemManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LogoItemWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LogoItemWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LogoItemWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    image: AssetWhereInput
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

enum LogoItemOrderByInput {
    id_ASC
    id_DESC
    title_ASC
    title_DESC
    url_ASC
    url_DESC
}

union LogoItemParent = LogosSection

input LogoItemParentConnectInput {
    LogosSection: LogosSectionConnectInput
}

input LogoItemParentCreateInput {
    LogosSection: LogosSectionCreateInput
}

input LogoItemParentCreateManyInlineInput {
    """
    Create and connect multiple existing LogoItemParent documents
    """
    create: [LogoItemParentCreateInput!]
}

input LogoItemParentCreateOneInlineInput {
    """
    Create and connect one LogoItemParent document
    """
    create: LogoItemParentCreateInput
}

input LogoItemParentCreateWithPositionInput {
    LogosSection: LogosSectionCreateWithPositionInput
}

input LogoItemParentUpdateInput {
    LogosSection: LogosSectionUpdateInput
}

input LogoItemParentUpdateManyInlineInput {
    """
    Create and connect multiple LogoItemParent component instances
    """
    create: [LogoItemParentCreateWithPositionInput!]
    """
    Delete multiple LogoItemParent documents
    """
    delete: [LogoItemParentWhereUniqueInput!]
    """
    Update multiple LogoItemParent component instances
    """
    update: [LogoItemParentUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple LogoItemParent component instances
    """
    upsert: [LogoItemParentUpsertWithNestedWhereUniqueAndPositionInput!]
}

input LogoItemParentUpdateManyWithNestedWhereInput {
    LogosSection: LogosSectionUpdateManyWithNestedWhereInput
}

input LogoItemParentUpdateOneInlineInput {
    """
    Create and connect one LogoItemParent document
    """
    create: LogoItemParentCreateInput
    """
    Delete currently connected LogoItemParent document
    """
    delete: Boolean
    """
    Update single LogoItemParent document
    """
    update: LogoItemParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single LogoItemParent document
    """
    upsert: LogoItemParentUpsertWithNestedWhereUniqueInput
}

input LogoItemParentUpdateWithNestedWhereUniqueAndPositionInput {
    LogosSection: LogosSectionUpdateWithNestedWhereUniqueAndPositionInput
}

input LogoItemParentUpdateWithNestedWhereUniqueInput {
    LogosSection: LogosSectionUpdateWithNestedWhereUniqueInput
}

input LogoItemParentUpsertWithNestedWhereUniqueAndPositionInput {
    LogosSection: LogosSectionUpsertWithNestedWhereUniqueAndPositionInput
}

input LogoItemParentUpsertWithNestedWhereUniqueInput {
    LogosSection: LogosSectionUpsertWithNestedWhereUniqueInput
}

input LogoItemParentWhereInput {
    LogosSection: LogosSectionWhereInput
}

input LogoItemParentWhereUniqueInput {
    LogosSection: LogosSectionWhereUniqueInput
}

input LogoItemUpdateInput {
    image: AssetUpdateOneInlineInput
    title: String
    url: String
}

input LogoItemUpdateManyInlineInput {
    """
    Create and connect multiple LogoItem component instances
    """
    create: [LogoItemCreateWithPositionInput!]
    """
    Delete multiple LogoItem documents
    """
    delete: [LogoItemWhereUniqueInput!]
    """
    Update multiple LogoItem component instances
    """
    update: [LogoItemUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple LogoItem component instances
    """
    upsert: [LogoItemUpsertWithNestedWhereUniqueAndPositionInput!]
}

input LogoItemUpdateManyInput {
    title: String
    url: String
}

input LogoItemUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: LogoItemUpdateManyInput!
    """
    Document search
    """
    where: LogoItemWhereInput!
}

input LogoItemUpdateOneInlineInput {
    """
    Create and connect one LogoItem document
    """
    create: LogoItemCreateInput
    """
    Delete currently connected LogoItem document
    """
    delete: Boolean
    """
    Update single LogoItem document
    """
    update: LogoItemUpdateWithNestedWhereUniqueInput
    """
    Upsert single LogoItem document
    """
    upsert: LogoItemUpsertWithNestedWhereUniqueInput
}

input LogoItemUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: LogoItemUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: LogoItemWhereUniqueInput!
}

input LogoItemUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: LogoItemUpdateInput!
    """
    Unique document search
    """
    where: LogoItemWhereUniqueInput!
}

input LogoItemUpsertInput {
    """
    Create document if it didn't exist
    """
    create: LogoItemCreateInput!
    """
    Update document if it exists
    """
    update: LogoItemUpdateInput!
}

input LogoItemUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: LogoItemUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: LogoItemWhereUniqueInput!
}

input LogoItemUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: LogoItemUpsertInput!
    """
    Unique document search
    """
    where: LogoItemWhereUniqueInput!
}

"""
Identifies documents
"""
input LogoItemWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LogoItemWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LogoItemWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LogoItemWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    image: AssetWhereInput
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

"""
References LogoItem record uniquely
"""
input LogoItemWhereUniqueInput {
    id: ID
}

type LogosSection implements Entity {
    """
    The unique identifier
    """
    id: ID!
    logos(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `logos` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `logos` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: LogoItemOrderByInput
        skip: Int
        where: LogoItemWhereInput
    ): [LogoItem!]!
    """
    System stage field
    """
    stage: Stage!
    """
    The subtitle is shown under the section's title.
    """
    subtitle: String
    """
    The section's title.
    """
    title: String
}

input LogosSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: LogosSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type LogosSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [LogosSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input LogosSectionCreateInput {
    logos: LogoItemCreateManyInlineInput
    subtitle: String
    title: String
}

input LogosSectionCreateManyInlineInput {
    """
    Create and connect multiple existing LogosSection documents
    """
    create: [LogosSectionCreateInput!]
}

input LogosSectionCreateOneInlineInput {
    """
    Create and connect one LogosSection document
    """
    create: LogosSectionCreateInput
}

input LogosSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: LogosSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type LogosSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: LogosSection!
}

"""
Identifies documents
"""
input LogosSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LogosSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LogosSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LogosSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    logos_every: LogoItemWhereInput
    logos_none: LogoItemWhereInput
    logos_some: LogoItemWhereInput
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum LogosSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union LogosSectionParent = LandingPage

input LogosSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input LogosSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input LogosSectionParentCreateManyInlineInput {
    """
    Connect multiple existing LogosSectionParent documents
    """
    connect: [LogosSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing LogosSectionParent documents
    """
    create: [LogosSectionParentCreateInput!]
}

input LogosSectionParentCreateOneInlineInput {
    """
    Connect one existing LogosSectionParent document
    """
    connect: LogosSectionParentWhereUniqueInput
    """
    Create and connect one LogosSectionParent document
    """
    create: LogosSectionParentCreateInput
}

input LogosSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input LogosSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing LogosSectionParent documents
    """
    connect: [LogosSectionParentConnectInput!]
    """
    Create and connect multiple LogosSectionParent documents
    """
    create: [LogosSectionParentCreateInput!]
    """
    Delete multiple LogosSectionParent documents
    """
    delete: [LogosSectionParentWhereUniqueInput!]
    """
    Disconnect multiple LogosSectionParent documents
    """
    disconnect: [LogosSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing LogosSectionParent documents
    """
    set: [LogosSectionParentWhereUniqueInput!]
    """
    Update multiple LogosSectionParent documents
    """
    update: [LogosSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple LogosSectionParent documents
    """
    upsert: [LogosSectionParentUpsertWithNestedWhereUniqueInput!]
}

input LogosSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input LogosSectionParentUpdateOneInlineInput {
    """
    Connect existing LogosSectionParent document
    """
    connect: LogosSectionParentWhereUniqueInput
    """
    Create and connect one LogosSectionParent document
    """
    create: LogosSectionParentCreateInput
    """
    Delete currently connected LogosSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected LogosSectionParent document
    """
    disconnect: Boolean
    """
    Update single LogosSectionParent document
    """
    update: LogosSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single LogosSectionParent document
    """
    upsert: LogosSectionParentUpsertWithNestedWhereUniqueInput
}

input LogosSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input LogosSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input LogosSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input LogosSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input LogosSectionUpdateInput {
    logos: LogoItemUpdateManyInlineInput
    subtitle: String
    title: String
}

input LogosSectionUpdateManyInlineInput {
    """
    Create and connect multiple LogosSection component instances
    """
    create: [LogosSectionCreateWithPositionInput!]
    """
    Delete multiple LogosSection documents
    """
    delete: [LogosSectionWhereUniqueInput!]
    """
    Update multiple LogosSection component instances
    """
    update: [LogosSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple LogosSection component instances
    """
    upsert: [LogosSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input LogosSectionUpdateManyInput {
    subtitle: String
    title: String
}

input LogosSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: LogosSectionUpdateManyInput!
    """
    Document search
    """
    where: LogosSectionWhereInput!
}

input LogosSectionUpdateOneInlineInput {
    """
    Create and connect one LogosSection document
    """
    create: LogosSectionCreateInput
    """
    Delete currently connected LogosSection document
    """
    delete: Boolean
    """
    Update single LogosSection document
    """
    update: LogosSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single LogosSection document
    """
    upsert: LogosSectionUpsertWithNestedWhereUniqueInput
}

input LogosSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: LogosSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: LogosSectionWhereUniqueInput!
}

input LogosSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: LogosSectionUpdateInput!
    """
    Unique document search
    """
    where: LogosSectionWhereUniqueInput!
}

input LogosSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: LogosSectionCreateInput!
    """
    Update document if it exists
    """
    update: LogosSectionUpdateInput!
}

input LogosSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: LogosSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: LogosSectionWhereUniqueInput!
}

input LogosSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: LogosSectionUpsertInput!
    """
    Unique document search
    """
    where: LogosSectionWhereUniqueInput!
}

"""
Identifies documents
"""
input LogosSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [LogosSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [LogosSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [LogosSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    logos_every: LogoItemWhereInput
    logos_none: LogoItemWhereInput
    logos_some: LogoItemWhereInput
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References LogosSection record uniquely
"""
input LogosSectionWhereUniqueInput {
    id: ID
}

"""
The Long scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
    """
    Create an asset. Use the returned info to finish the creation process by uploading the asset.
    """
    createAsset(data: AssetCreateInput!): Asset
    """
    Create one landingPage
    """
    createLandingPage(data: LandingPageCreateInput!): LandingPage
    """
    Create one person
    """
    createPerson(data: PersonCreateInput!): Person
    """
    Create one postPage
    """
    createPostPage(data: PostPageCreateInput!): PostPage
    """
    Create one scheduledRelease
    """
    createScheduledRelease(data: ScheduledReleaseCreateInput!): ScheduledRelease
    """
    Create one siteConfig
    """
    createSiteConfig(data: SiteConfigCreateInput!): SiteConfig
    """
    Delete one asset from _all_ existing stages. Returns deleted document.
    """
    deleteAsset(
        """
        Document to delete
        """
        where: AssetWhereUniqueInput!
    ): Asset
    """
    Delete one landingPage from _all_ existing stages. Returns deleted document.
    """
    deleteLandingPage(
        """
        Document to delete
        """
        where: LandingPageWhereUniqueInput!
    ): LandingPage
    """
    Delete many Asset documents
    """
    deleteManyAssets(
        """
        Documents to delete
        """
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyAssetsConnection)")
    """
    Delete many Asset documents, return deleted documents
    """
    deleteManyAssetsConnection(
        after: ID
        before: ID
        first: Int
        last: Int
        skip: Int
        """
        Documents to delete
        """
        where: AssetManyWhereInput
    ): AssetConnection!
    """
    Delete many LandingPage documents
    """
    deleteManyLandingPages(
        """
        Documents to delete
        """
        where: LandingPageManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (deleteManyLandingPagesConnection)")
    """
    Delete many LandingPage documents, return deleted documents
    """
    deleteManyLandingPagesConnection(
        after: ID
        before: ID
        first: Int
        last: Int
        skip: Int
        """
        Documents to delete
        """
        where: LandingPageManyWhereInput
    ): LandingPageConnection!
    """
    Delete many Person documents
    """
    deleteManyPeople(
        """
        Documents to delete
        """
        where: PersonManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPeopleConnection)")
    """
    Delete many Person documents, return deleted documents
    """
    deleteManyPeopleConnection(
        after: ID
        before: ID
        first: Int
        last: Int
        skip: Int
        """
        Documents to delete
        """
        where: PersonManyWhereInput
    ): PersonConnection!
    """
    Delete many PostPage documents
    """
    deleteManyPostPages(
        """
        Documents to delete
        """
        where: PostPageManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManyPostPagesConnection)")
    """
    Delete many PostPage documents, return deleted documents
    """
    deleteManyPostPagesConnection(
        after: ID
        before: ID
        first: Int
        last: Int
        skip: Int
        """
        Documents to delete
        """
        where: PostPageManyWhereInput
    ): PostPageConnection!
    """
    Delete many SiteConfig documents
    """
    deleteManySiteConfigs(
        """
        Documents to delete
        """
        where: SiteConfigManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (deleteManySiteConfigsConnection)")
    """
    Delete many SiteConfig documents, return deleted documents
    """
    deleteManySiteConfigsConnection(
        after: ID
        before: ID
        first: Int
        last: Int
        skip: Int
        """
        Documents to delete
        """
        where: SiteConfigManyWhereInput
    ): SiteConfigConnection!
    """
    Delete one person from _all_ existing stages. Returns deleted document.
    """
    deletePerson(
        """
        Document to delete
        """
        where: PersonWhereUniqueInput!
    ): Person
    """
    Delete one postPage from _all_ existing stages. Returns deleted document.
    """
    deletePostPage(
        """
        Document to delete
        """
        where: PostPageWhereUniqueInput!
    ): PostPage
    """
    Delete and return scheduled operation
    """
    deleteScheduledOperation(
        """
        Document to delete
        """
        where: ScheduledOperationWhereUniqueInput!
    ): ScheduledOperation
    """
    Delete one scheduledRelease from _all_ existing stages. Returns deleted document.
    """
    deleteScheduledRelease(
        """
        Document to delete
        """
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    """
    Delete one siteConfig from _all_ existing stages. Returns deleted document.
    """
    deleteSiteConfig(
        """
        Document to delete
        """
        where: SiteConfigWhereUniqueInput!
    ): SiteConfig
    """
    Publish one asset
    """
    publishAsset(
        """
        Optional localizations to publish
        """
        locales: [Locale!]
        """
        Whether to publish the base document
        """
        publishBase: Boolean = true
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: AssetWhereUniqueInput!
        """
        Whether to include the default locale when publishBase is set
        """
        withDefaultLocale: Boolean = true
    ): Asset
    """
    Publish one landingPage
    """
    publishLandingPage(
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: LandingPageWhereUniqueInput!
    ): LandingPage
    """
    Publish many Asset documents
    """
    publishManyAssets(
        """
        Document localizations to publish
        """
        locales: [Locale!]
        """
        Whether to publish the base document
        """
        publishBase: Boolean = true
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: AssetManyWhereInput
        """
        Whether to include the default locale when publishBase is true
        """
        withDefaultLocale: Boolean = true
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyAssetsConnection)")
    """
    Publish many Asset documents
    """
    publishManyAssetsConnection(
        after: ID
        before: ID
        first: Int
        """
        Stage to find matching documents in
        """
        from: Stage = DRAFT
        last: Int
        """
        Document localizations to publish
        """
        locales: [Locale!]
        """
        Whether to publish the base document
        """
        publishBase: Boolean = true
        skip: Int
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: AssetManyWhereInput
        """
        Whether to include the default locale when publishBase is true
        """
        withDefaultLocale: Boolean = true
    ): AssetConnection!
    """
    Publish many LandingPage documents
    """
    publishManyLandingPages(
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: LandingPageManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (publishManyLandingPagesConnection)")
    """
    Publish many LandingPage documents
    """
    publishManyLandingPagesConnection(
        after: ID
        before: ID
        first: Int
        """
        Stage to find matching documents in
        """
        from: Stage = DRAFT
        last: Int
        skip: Int
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: LandingPageManyWhereInput
    ): LandingPageConnection!
    """
    Publish many Person documents
    """
    publishManyPeople(
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: PersonManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPeopleConnection)")
    """
    Publish many Person documents
    """
    publishManyPeopleConnection(
        after: ID
        before: ID
        first: Int
        """
        Stage to find matching documents in
        """
        from: Stage = DRAFT
        last: Int
        skip: Int
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: PersonManyWhereInput
    ): PersonConnection!
    """
    Publish many PostPage documents
    """
    publishManyPostPages(
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: PostPageManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (publishManyPostPagesConnection)")
    """
    Publish many PostPage documents
    """
    publishManyPostPagesConnection(
        after: ID
        before: ID
        first: Int
        """
        Stage to find matching documents in
        """
        from: Stage = DRAFT
        last: Int
        skip: Int
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: PostPageManyWhereInput
    ): PostPageConnection!
    """
    Publish many SiteConfig documents
    """
    publishManySiteConfigs(
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: SiteConfigManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (publishManySiteConfigsConnection)")
    """
    Publish many SiteConfig documents
    """
    publishManySiteConfigsConnection(
        after: ID
        before: ID
        first: Int
        """
        Stage to find matching documents in
        """
        from: Stage = DRAFT
        last: Int
        skip: Int
        """
        Stages to publish documents to
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage to be published
        """
        where: SiteConfigManyWhereInput
    ): SiteConfigConnection!
    """
    Publish one person
    """
    publishPerson(
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: PersonWhereUniqueInput!
    ): Person
    """
    Publish one postPage
    """
    publishPostPage(
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: PostPageWhereUniqueInput!
    ): PostPage
    """
    Publish one siteConfig
    """
    publishSiteConfig(
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: SiteConfigWhereUniqueInput!
    ): SiteConfig
    """
    Schedule to publish one asset
    """
    schedulePublishAsset(
        """
        Optional localizations to publish
        """
        locales: [Locale!]
        """
        Whether to publish the base document
        """
        publishBase: Boolean = true
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: AssetWhereUniqueInput!
        """
        Whether to include the default locale when publishBase is set
        """
        withDefaultLocale: Boolean = true
    ): Asset
    """
    Schedule to publish one landingPage
    """
    schedulePublishLandingPage(
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: LandingPageWhereUniqueInput!
    ): LandingPage
    """
    Schedule to publish one person
    """
    schedulePublishPerson(
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: PersonWhereUniqueInput!
    ): Person
    """
    Schedule to publish one postPage
    """
    schedulePublishPostPage(
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: PostPageWhereUniqueInput!
    ): PostPage
    """
    Schedule to publish one siteConfig
    """
    schedulePublishSiteConfig(
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Publishing target stage
        """
        to: [Stage!]! = [PUBLISHED]
        """
        Document to publish
        """
        where: SiteConfigWhereUniqueInput!
    ): SiteConfig
    """
    Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    scheduleUnpublishAsset(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
        """
        locales: [Locale!]
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Unpublish complete document including default localization and relations from stages. Can be disabled.
        """
        unpublishBase: Boolean = true
        """
        Document to unpublish
        """
        where: AssetWhereUniqueInput!
    ): Asset
    """
    Unpublish one landingPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    scheduleUnpublishLandingPage(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Document to unpublish
        """
        where: LandingPageWhereUniqueInput!
    ): LandingPage
    """
    Unpublish one person from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    scheduleUnpublishPerson(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Document to unpublish
        """
        where: PersonWhereUniqueInput!
    ): Person
    """
    Unpublish one postPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    scheduleUnpublishPostPage(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Document to unpublish
        """
        where: PostPageWhereUniqueInput!
    ): PostPage
    """
    Unpublish one siteConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    scheduleUnpublishSiteConfig(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Release at point in time, will create new release containing this operation
        """
        releaseAt: DateTime
        """
        Optionally attach this scheduled operation to an existing release
        """
        releaseId: String
        """
        Document to unpublish
        """
        where: SiteConfigWhereUniqueInput!
    ): SiteConfig
    """
    Unpublish one asset from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    unpublishAsset(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Optional locales to unpublish. Unpublishing the default locale will completely remove the document from the selected stages
        """
        locales: [Locale!]
        """
        Unpublish complete document including default localization and relations from stages. Can be disabled.
        """
        unpublishBase: Boolean = true
        """
        Document to unpublish
        """
        where: AssetWhereUniqueInput!
    ): Asset
    """
    Unpublish one landingPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    unpublishLandingPage(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Document to unpublish
        """
        where: LandingPageWhereUniqueInput!
    ): LandingPage
    """
    Unpublish many Asset documents
    """
    unpublishManyAssets(
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Locales to unpublish
        """
        locales: [Locale!]
        """
        Whether to unpublish the base document and default localization
        """
        unpublishBase: Boolean = true
        """
        Identifies documents in each stage
        """
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyAssetsConnection)")
    """
    Find many Asset documents that match criteria in specified stage and unpublish from target stages
    """
    unpublishManyAssetsConnection(
        after: ID
        before: ID
        first: Int
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        last: Int
        """
        Locales to unpublish
        """
        locales: [Locale!]
        skip: Int
        """
        Stage to find matching documents in
        """
        stage: Stage = DRAFT
        """
        Whether to unpublish the base document and default localization
        """
        unpublishBase: Boolean = true
        """
        Identifies documents in draft stage
        """
        where: AssetManyWhereInput
    ): AssetConnection!
    """
    Unpublish many LandingPage documents
    """
    unpublishManyLandingPages(
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage
        """
        where: LandingPageManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (unpublishManyLandingPagesConnection)")
    """
    Find many LandingPage documents that match criteria in specified stage and unpublish from target stages
    """
    unpublishManyLandingPagesConnection(
        after: ID
        before: ID
        first: Int
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        last: Int
        skip: Int
        """
        Stage to find matching documents in
        """
        stage: Stage = DRAFT
        """
        Identifies documents in draft stage
        """
        where: LandingPageManyWhereInput
    ): LandingPageConnection!
    """
    Unpublish many Person documents
    """
    unpublishManyPeople(
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage
        """
        where: PersonManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPeopleConnection)")
    """
    Find many Person documents that match criteria in specified stage and unpublish from target stages
    """
    unpublishManyPeopleConnection(
        after: ID
        before: ID
        first: Int
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        last: Int
        skip: Int
        """
        Stage to find matching documents in
        """
        stage: Stage = DRAFT
        """
        Identifies documents in draft stage
        """
        where: PersonManyWhereInput
    ): PersonConnection!
    """
    Unpublish many PostPage documents
    """
    unpublishManyPostPages(
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage
        """
        where: PostPageManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (unpublishManyPostPagesConnection)")
    """
    Find many PostPage documents that match criteria in specified stage and unpublish from target stages
    """
    unpublishManyPostPagesConnection(
        after: ID
        before: ID
        first: Int
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        last: Int
        skip: Int
        """
        Stage to find matching documents in
        """
        stage: Stage = DRAFT
        """
        Identifies documents in draft stage
        """
        where: PostPageManyWhereInput
    ): PostPageConnection!
    """
    Unpublish many SiteConfig documents
    """
    unpublishManySiteConfigs(
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Identifies documents in each stage
        """
        where: SiteConfigManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (unpublishManySiteConfigsConnection)")
    """
    Find many SiteConfig documents that match criteria in specified stage and unpublish from target stages
    """
    unpublishManySiteConfigsConnection(
        after: ID
        before: ID
        first: Int
        """
        Stages to unpublish documents from
        """
        from: [Stage!]! = [PUBLISHED]
        last: Int
        skip: Int
        """
        Stage to find matching documents in
        """
        stage: Stage = DRAFT
        """
        Identifies documents in draft stage
        """
        where: SiteConfigManyWhereInput
    ): SiteConfigConnection!
    """
    Unpublish one person from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    unpublishPerson(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Document to unpublish
        """
        where: PersonWhereUniqueInput!
    ): Person
    """
    Unpublish one postPage from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    unpublishPostPage(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Document to unpublish
        """
        where: PostPageWhereUniqueInput!
    ): PostPage
    """
    Unpublish one siteConfig from selected stages. Unpublish either the complete document with its relations, localizations and base data or specific localizations only.
    """
    unpublishSiteConfig(
        """
        Stages to unpublish document from
        """
        from: [Stage!]! = [PUBLISHED]
        """
        Document to unpublish
        """
        where: SiteConfigWhereUniqueInput!
    ): SiteConfig
    """
    Update one asset
    """
    updateAsset(data: AssetUpdateInput!, where: AssetWhereUniqueInput!): Asset
    """
    Update one landingPage
    """
    updateLandingPage(data: LandingPageUpdateInput!, where: LandingPageWhereUniqueInput!): LandingPage
    """
    Update many assets
    """
    updateManyAssets(
        """
        Updates to document content
        """
        data: AssetUpdateManyInput!
        """
        Documents to apply update on
        """
        where: AssetManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyAssetsConnection)")
    """
    Update many Asset documents
    """
    updateManyAssetsConnection(
        after: ID
        before: ID
        """
        Updates to document content
        """
        data: AssetUpdateManyInput!
        first: Int
        last: Int
        skip: Int
        """
        Documents to apply update on
        """
        where: AssetManyWhereInput
    ): AssetConnection!
    """
    Update many landingPages
    """
    updateManyLandingPages(
        """
        Updates to document content
        """
        data: LandingPageUpdateManyInput!
        """
        Documents to apply update on
        """
        where: LandingPageManyWhereInput
    ): BatchPayload!
        @deprecated(reason: "Please use the new paginated many mutation (updateManyLandingPagesConnection)")
    """
    Update many LandingPage documents
    """
    updateManyLandingPagesConnection(
        after: ID
        before: ID
        """
        Updates to document content
        """
        data: LandingPageUpdateManyInput!
        first: Int
        last: Int
        skip: Int
        """
        Documents to apply update on
        """
        where: LandingPageManyWhereInput
    ): LandingPageConnection!
    """
    Update many people
    """
    updateManyPeople(
        """
        Updates to document content
        """
        data: PersonUpdateManyInput!
        """
        Documents to apply update on
        """
        where: PersonManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPeopleConnection)")
    """
    Update many Person documents
    """
    updateManyPeopleConnection(
        after: ID
        before: ID
        """
        Updates to document content
        """
        data: PersonUpdateManyInput!
        first: Int
        last: Int
        skip: Int
        """
        Documents to apply update on
        """
        where: PersonManyWhereInput
    ): PersonConnection!
    """
    Update many postPages
    """
    updateManyPostPages(
        """
        Updates to document content
        """
        data: PostPageUpdateManyInput!
        """
        Documents to apply update on
        """
        where: PostPageManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManyPostPagesConnection)")
    """
    Update many PostPage documents
    """
    updateManyPostPagesConnection(
        after: ID
        before: ID
        """
        Updates to document content
        """
        data: PostPageUpdateManyInput!
        first: Int
        last: Int
        skip: Int
        """
        Documents to apply update on
        """
        where: PostPageManyWhereInput
    ): PostPageConnection!
    """
    Update many siteConfigs
    """
    updateManySiteConfigs(
        """
        Updates to document content
        """
        data: SiteConfigUpdateManyInput!
        """
        Documents to apply update on
        """
        where: SiteConfigManyWhereInput
    ): BatchPayload! @deprecated(reason: "Please use the new paginated many mutation (updateManySiteConfigsConnection)")
    """
    Update many SiteConfig documents
    """
    updateManySiteConfigsConnection(
        after: ID
        before: ID
        """
        Updates to document content
        """
        data: SiteConfigUpdateManyInput!
        first: Int
        last: Int
        skip: Int
        """
        Documents to apply update on
        """
        where: SiteConfigManyWhereInput
    ): SiteConfigConnection!
    """
    Update one person
    """
    updatePerson(data: PersonUpdateInput!, where: PersonWhereUniqueInput!): Person
    """
    Update one postPage
    """
    updatePostPage(data: PostPageUpdateInput!, where: PostPageWhereUniqueInput!): PostPage
    """
    Update one scheduledRelease
    """
    updateScheduledRelease(
        data: ScheduledReleaseUpdateInput!
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    """
    Update one siteConfig
    """
    updateSiteConfig(data: SiteConfigUpdateInput!, where: SiteConfigWhereUniqueInput!): SiteConfig
    """
    Upsert one asset
    """
    upsertAsset(upsert: AssetUpsertInput!, where: AssetWhereUniqueInput!): Asset
    """
    Upsert one landingPage
    """
    upsertLandingPage(upsert: LandingPageUpsertInput!, where: LandingPageWhereUniqueInput!): LandingPage
    """
    Upsert one person
    """
    upsertPerson(upsert: PersonUpsertInput!, where: PersonWhereUniqueInput!): Person
    """
    Upsert one postPage
    """
    upsertPostPage(upsert: PostPageUpsertInput!, where: PostPageWhereUniqueInput!): PostPage
    """
    Upsert one siteConfig
    """
    upsertSiteConfig(upsert: SiteConfigUpsertInput!, where: SiteConfigWhereUniqueInput!): SiteConfig
}

type NavigationBar implements Entity {
    actions(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `actions` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `actions` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: ActionOrderByInput
        skip: Int
        where: ActionWhereInput
    ): [Action!]!
    """
    The unique identifier
    """
    id: ID!
    links(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `links` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `links` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: LinkOrderByInput
        skip: Int
        where: LinkWhereInput
    ): [Link!]!
    """
    System stage field
    """
    stage: Stage!
}

input NavigationBarConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: NavigationBarWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type NavigationBarConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [NavigationBarEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input NavigationBarCreateInput {
    actions: ActionCreateManyInlineInput
    links: LinkCreateManyInlineInput
}

input NavigationBarCreateManyInlineInput {
    """
    Create and connect multiple existing NavigationBar documents
    """
    create: [NavigationBarCreateInput!]
}

input NavigationBarCreateOneInlineInput {
    """
    Create and connect one NavigationBar document
    """
    create: NavigationBarCreateInput
}

input NavigationBarCreateWithPositionInput {
    """
    Document to create
    """
    data: NavigationBarCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type NavigationBarEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: NavigationBar!
}

"""
Identifies documents
"""
input NavigationBarManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [NavigationBarWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [NavigationBarWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [NavigationBarWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    actions_every: ActionWhereInput
    actions_none: ActionWhereInput
    actions_some: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    links_every: LinkWhereInput
    links_none: LinkWhereInput
    links_some: LinkWhereInput
}

enum NavigationBarOrderByInput {
    id_ASC
    id_DESC
}

union NavigationBarParent = SiteConfig

input NavigationBarParentConnectInput {
    SiteConfig: SiteConfigConnectInput
}

input NavigationBarParentCreateInput {
    SiteConfig: SiteConfigCreateInput
}

input NavigationBarParentCreateManyInlineInput {
    """
    Connect multiple existing NavigationBarParent documents
    """
    connect: [NavigationBarParentWhereUniqueInput!]
    """
    Create and connect multiple existing NavigationBarParent documents
    """
    create: [NavigationBarParentCreateInput!]
}

input NavigationBarParentCreateOneInlineInput {
    """
    Connect one existing NavigationBarParent document
    """
    connect: NavigationBarParentWhereUniqueInput
    """
    Create and connect one NavigationBarParent document
    """
    create: NavigationBarParentCreateInput
}

input NavigationBarParentUpdateInput {
    SiteConfig: SiteConfigUpdateInput
}

input NavigationBarParentUpdateManyInlineInput {
    """
    Connect multiple existing NavigationBarParent documents
    """
    connect: [NavigationBarParentConnectInput!]
    """
    Create and connect multiple NavigationBarParent documents
    """
    create: [NavigationBarParentCreateInput!]
    """
    Delete multiple NavigationBarParent documents
    """
    delete: [NavigationBarParentWhereUniqueInput!]
    """
    Disconnect multiple NavigationBarParent documents
    """
    disconnect: [NavigationBarParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing NavigationBarParent documents
    """
    set: [NavigationBarParentWhereUniqueInput!]
    """
    Update multiple NavigationBarParent documents
    """
    update: [NavigationBarParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple NavigationBarParent documents
    """
    upsert: [NavigationBarParentUpsertWithNestedWhereUniqueInput!]
}

input NavigationBarParentUpdateManyWithNestedWhereInput {
    SiteConfig: SiteConfigUpdateManyWithNestedWhereInput
}

input NavigationBarParentUpdateOneInlineInput {
    """
    Connect existing NavigationBarParent document
    """
    connect: NavigationBarParentWhereUniqueInput
    """
    Create and connect one NavigationBarParent document
    """
    create: NavigationBarParentCreateInput
    """
    Delete currently connected NavigationBarParent document
    """
    delete: Boolean
    """
    Disconnect currently connected NavigationBarParent document
    """
    disconnect: Boolean
    """
    Update single NavigationBarParent document
    """
    update: NavigationBarParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single NavigationBarParent document
    """
    upsert: NavigationBarParentUpsertWithNestedWhereUniqueInput
}

input NavigationBarParentUpdateWithNestedWhereUniqueInput {
    SiteConfig: SiteConfigUpdateWithNestedWhereUniqueInput
}

input NavigationBarParentUpsertWithNestedWhereUniqueInput {
    SiteConfig: SiteConfigUpsertWithNestedWhereUniqueInput
}

input NavigationBarParentWhereInput {
    SiteConfig: SiteConfigWhereInput
}

input NavigationBarParentWhereUniqueInput {
    SiteConfig: SiteConfigWhereUniqueInput
}

input NavigationBarUpdateInput {
    actions: ActionUpdateManyInlineInput
    links: LinkUpdateManyInlineInput
}

input NavigationBarUpdateManyInlineInput {
    """
    Create and connect multiple NavigationBar component instances
    """
    create: [NavigationBarCreateWithPositionInput!]
    """
    Delete multiple NavigationBar documents
    """
    delete: [NavigationBarWhereUniqueInput!]
    """
    Update multiple NavigationBar component instances
    """
    update: [NavigationBarUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple NavigationBar component instances
    """
    upsert: [NavigationBarUpsertWithNestedWhereUniqueAndPositionInput!]
}

input NavigationBarUpdateManyInput {
    """
    No fields in updateMany data input
    """
    _: String
}

input NavigationBarUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: NavigationBarUpdateManyInput!
    """
    Document search
    """
    where: NavigationBarWhereInput!
}

input NavigationBarUpdateOneInlineInput {
    """
    Create and connect one NavigationBar document
    """
    create: NavigationBarCreateInput
    """
    Delete currently connected NavigationBar document
    """
    delete: Boolean
    """
    Update single NavigationBar document
    """
    update: NavigationBarUpdateWithNestedWhereUniqueInput
    """
    Upsert single NavigationBar document
    """
    upsert: NavigationBarUpsertWithNestedWhereUniqueInput
}

input NavigationBarUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: NavigationBarUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: NavigationBarWhereUniqueInput!
}

input NavigationBarUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: NavigationBarUpdateInput!
    """
    Unique document search
    """
    where: NavigationBarWhereUniqueInput!
}

input NavigationBarUpsertInput {
    """
    Create document if it didn't exist
    """
    create: NavigationBarCreateInput!
    """
    Update document if it exists
    """
    update: NavigationBarUpdateInput!
}

input NavigationBarUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: NavigationBarUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: NavigationBarWhereUniqueInput!
}

input NavigationBarUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: NavigationBarUpsertInput!
    """
    Unique document search
    """
    where: NavigationBarWhereUniqueInput!
}

"""
Identifies documents
"""
input NavigationBarWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [NavigationBarWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [NavigationBarWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [NavigationBarWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    actions_every: ActionWhereInput
    actions_none: ActionWhereInput
    actions_some: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    links_every: LinkWhereInput
    links_none: LinkWhereInput
    links_some: LinkWhereInput
}

"""
References NavigationBar record uniquely
"""
input NavigationBarWhereUniqueInput {
    id: ID
}

"""
An object with an ID
"""
interface Node {
    """
    The id of the object.
    """
    id: ID!
    """
    The Stage of an object
    """
    stage: Stage!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
    """
    When paginating forwards, the cursor to continue.
    """
    endCursor: String
    """
    When paginating forwards, are there more items?
    """
    hasNextPage: Boolean!
    """
    When paginating backwards, are there more items?
    """
    hasPreviousPage: Boolean!
    """
    Number of items in the current page.
    """
    pageSize: Int
    """
    When paginating backwards, the cursor to continue.
    """
    startCursor: String
}

type Person implements Entity & Node {
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [Person!]!
    """
    List of Person versions
    """
    history(
        limit: Int! = 10
        skip: Int! = 0
        """
        This is optional and can be used to fetch the document version history for a specific stage instead of the current one
        """
        stageOverride: Stage
    ): [Version!]!
    """
    The unique identifier
    """
    id: ID!
    jobDescription: String
    name: String!
    photo(
        """
        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `photo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `photo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        where: AssetSingleRelationWhereInput
    ): Asset
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    socialIconLinks(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `socialIconLinks` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `socialIconLinks` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: SocialIconLinkOrderByInput
        skip: Int
        where: SocialIconLinkWhereInput
    ): [SocialIconLink!]!
    """
    System stage field
    """
    stage: Stage!
    title: String
    """
    The time the document was updated
    """
    updatedAt: DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

input PersonConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: PersonWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type PersonConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [PersonEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input PersonCreateInput {
    cm6xr4uf6105607mt50oybsex: TeamSectionCreateManyInlineInput
    cm6xrpe3t10lc07mtdow0gr4o: PostPageCreateManyInlineInput
    createdAt: DateTime
    jobDescription: String
    name: String!
    photo: AssetCreateOneInlineInput
    socialIconLinks: SocialIconLinkCreateManyInlineInput
    title: String
    updatedAt: DateTime
}

input PersonCreateManyInlineInput {
    """
    Connect multiple existing Person documents
    """
    connect: [PersonWhereUniqueInput!]
    """
    Create and connect multiple existing Person documents
    """
    create: [PersonCreateInput!]
}

input PersonCreateOneInlineInput {
    """
    Connect one existing Person document
    """
    connect: PersonWhereUniqueInput
    """
    Create and connect one Person document
    """
    create: PersonCreateInput
}

"""
An edge in a connection.
"""
type PersonEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: Person!
}

"""
Identifies documents
"""
input PersonManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PersonWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PersonWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PersonWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: PersonWhereStageInput
    documentInStages_none: PersonWhereStageInput
    documentInStages_some: PersonWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    jobDescription: String
    """
    All values containing the given string.
    """
    jobDescription_contains: String
    """
    All values ending with the given string.
    """
    jobDescription_ends_with: String
    """
    All values that are contained in given list.
    """
    jobDescription_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    jobDescription_not: String
    """
    All values not containing the given string.
    """
    jobDescription_not_contains: String
    """
    All values not ending with the given string
    """
    jobDescription_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    jobDescription_not_in: [String]
    """
    All values not starting with the given string.
    """
    jobDescription_not_starts_with: String
    """
    All values starting with the given string.
    """
    jobDescription_starts_with: String
    name: String
    """
    All values containing the given string.
    """
    name_contains: String
    """
    All values ending with the given string.
    """
    name_ends_with: String
    """
    All values that are contained in given list.
    """
    name_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    name_not: String
    """
    All values not containing the given string.
    """
    name_not_contains: String
    """
    All values not ending with the given string
    """
    name_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    name_not_in: [String]
    """
    All values not starting with the given string.
    """
    name_not_starts_with: String
    """
    All values starting with the given string.
    """
    name_starts_with: String
    photo: AssetWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    socialIconLinks_every: SocialIconLinkWhereInput
    socialIconLinks_none: SocialIconLinkWhereInput
    socialIconLinks_some: SocialIconLinkWhereInput
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

enum PersonOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    jobDescription_ASC
    jobDescription_DESC
    name_ASC
    name_DESC
    publishedAt_ASC
    publishedAt_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input PersonUpdateInput {
    cm6xr4uf6105607mt50oybsex: TeamSectionUpdateManyInlineInput
    cm6xrpe3t10lc07mtdow0gr4o: PostPageUpdateManyInlineInput
    jobDescription: String
    name: String
    photo: AssetUpdateOneInlineInput
    socialIconLinks: SocialIconLinkUpdateManyInlineInput
    title: String
}

input PersonUpdateManyInlineInput {
    """
    Connect multiple existing Person documents
    """
    connect: [PersonConnectInput!]
    """
    Create and connect multiple Person documents
    """
    create: [PersonCreateInput!]
    """
    Delete multiple Person documents
    """
    delete: [PersonWhereUniqueInput!]
    """
    Disconnect multiple Person documents
    """
    disconnect: [PersonWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing Person documents
    """
    set: [PersonWhereUniqueInput!]
    """
    Update multiple Person documents
    """
    update: [PersonUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple Person documents
    """
    upsert: [PersonUpsertWithNestedWhereUniqueInput!]
}

input PersonUpdateManyInput {
    jobDescription: String
    name: String
    title: String
}

input PersonUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: PersonUpdateManyInput!
    """
    Document search
    """
    where: PersonWhereInput!
}

input PersonUpdateOneInlineInput {
    """
    Connect existing Person document
    """
    connect: PersonWhereUniqueInput
    """
    Create and connect one Person document
    """
    create: PersonCreateInput
    """
    Delete currently connected Person document
    """
    delete: Boolean
    """
    Disconnect currently connected Person document
    """
    disconnect: Boolean
    """
    Update single Person document
    """
    update: PersonUpdateWithNestedWhereUniqueInput
    """
    Upsert single Person document
    """
    upsert: PersonUpsertWithNestedWhereUniqueInput
}

input PersonUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: PersonUpdateInput!
    """
    Unique document search
    """
    where: PersonWhereUniqueInput!
}

input PersonUpsertInput {
    """
    Create document if it didn't exist
    """
    create: PersonCreateInput!
    """
    Update document if it exists
    """
    update: PersonUpdateInput!
}

input PersonUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: PersonUpsertInput!
    """
    Unique document search
    """
    where: PersonWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input PersonWhereComparatorInput {
    """
    This field can be used to request to check if the entry is outdated by internal comparison
    """
    outdated_to: Boolean
}

"""
Identifies documents
"""
input PersonWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PersonWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PersonWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PersonWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: PersonWhereStageInput
    documentInStages_none: PersonWhereStageInput
    documentInStages_some: PersonWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    jobDescription: String
    """
    All values containing the given string.
    """
    jobDescription_contains: String
    """
    All values ending with the given string.
    """
    jobDescription_ends_with: String
    """
    All values that are contained in given list.
    """
    jobDescription_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    jobDescription_not: String
    """
    All values not containing the given string.
    """
    jobDescription_not_contains: String
    """
    All values not ending with the given string
    """
    jobDescription_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    jobDescription_not_in: [String]
    """
    All values not starting with the given string.
    """
    jobDescription_not_starts_with: String
    """
    All values starting with the given string.
    """
    jobDescription_starts_with: String
    name: String
    """
    All values containing the given string.
    """
    name_contains: String
    """
    All values ending with the given string.
    """
    name_ends_with: String
    """
    All values that are contained in given list.
    """
    name_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    name_not: String
    """
    All values not containing the given string.
    """
    name_not_contains: String
    """
    All values not ending with the given string
    """
    name_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    name_not_in: [String]
    """
    All values not starting with the given string.
    """
    name_not_starts_with: String
    """
    All values starting with the given string.
    """
    name_starts_with: String
    photo: AssetWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    socialIconLinks_every: SocialIconLinkWhereInput
    socialIconLinks_none: SocialIconLinkWhereInput
    socialIconLinks_some: SocialIconLinkWhereInput
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input PersonWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [PersonWhereStageInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PersonWhereStageInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PersonWhereStageInput!]
    """
    This field contains fields which can be set as true or false to specify an internal comparison
    """
    compareWithParent: PersonWhereComparatorInput
    """
    Specify the stage to compare with
    """
    stage: Stage
}

"""
References Person record uniquely
"""
input PersonWhereUniqueInput {
    id: ID
}

type PostPage implements Entity & Node {
    author(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `author` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `author` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Person
    category: String
    """
    The icon must match one of the icon names from flaticon.com, e.g., "fi-brands-instagram".
    """
    categoryIcon: String
    content: String
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    date: Date
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [PostPage!]!
    excerpt: String
    """
    List of PostPage versions
    """
    history(
        limit: Int! = 10
        skip: Int! = 0
        """
        This is optional and can be used to fetch the document version history for a specific stage instead of the current one
        """
        stageOverride: Stage
    ): [Version!]!
    """
    The unique identifier
    """
    id: ID!
    image(
        """
        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `image` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        where: AssetSingleRelationWhereInput
    ): Asset
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    relatedPosts(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `relatedPosts` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `relatedPosts` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: PostPageOrderByInput
        skip: Int
        where: PostPageWhereInput
    ): [PostPage!]!
    scheduledIn(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    slug: String!
    """
    System stage field
    """
    stage: Stage!
    title: String!
    """
    The time the document was updated
    """
    updatedAt: DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

input PostPageConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: PostPageWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type PostPageConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [PostPageEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input PostPageCreateInput {
    author: PersonCreateOneInlineInput
    category: String
    categoryIcon: String
    cm6xrtx9r10yq07mtd25igfiz: PostPageCreateManyInlineInput
    content: String
    createdAt: DateTime
    date: Date
    excerpt: String
    image: AssetCreateOneInlineInput
    relatedPosts: PostPageCreateManyInlineInput
    slug: String!
    title: String!
    updatedAt: DateTime
}

input PostPageCreateManyInlineInput {
    """
    Connect multiple existing PostPage documents
    """
    connect: [PostPageWhereUniqueInput!]
    """
    Create and connect multiple existing PostPage documents
    """
    create: [PostPageCreateInput!]
}

input PostPageCreateOneInlineInput {
    """
    Connect one existing PostPage document
    """
    connect: PostPageWhereUniqueInput
    """
    Create and connect one PostPage document
    """
    create: PostPageCreateInput
}

"""
An edge in a connection.
"""
type PostPageEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: PostPage!
}

"""
Identifies documents
"""
input PostPageManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PostPageWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PostPageWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PostPageWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    author: PersonWhereInput
    category: String
    categoryIcon: String
    """
    All values containing the given string.
    """
    categoryIcon_contains: String
    """
    All values ending with the given string.
    """
    categoryIcon_ends_with: String
    """
    All values that are contained in given list.
    """
    categoryIcon_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    categoryIcon_not: String
    """
    All values not containing the given string.
    """
    categoryIcon_not_contains: String
    """
    All values not ending with the given string
    """
    categoryIcon_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    categoryIcon_not_in: [String]
    """
    All values not starting with the given string.
    """
    categoryIcon_not_starts_with: String
    """
    All values starting with the given string.
    """
    categoryIcon_starts_with: String
    """
    All values containing the given string.
    """
    category_contains: String
    """
    All values ending with the given string.
    """
    category_ends_with: String
    """
    All values that are contained in given list.
    """
    category_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    category_not: String
    """
    All values not containing the given string.
    """
    category_not_contains: String
    """
    All values not ending with the given string
    """
    category_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    category_not_in: [String]
    """
    All values not starting with the given string.
    """
    category_not_starts_with: String
    """
    All values starting with the given string.
    """
    category_starts_with: String
    content: String
    """
    All values containing the given string.
    """
    content_contains: String
    """
    All values ending with the given string.
    """
    content_ends_with: String
    """
    All values that are contained in given list.
    """
    content_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    content_not: String
    """
    All values not containing the given string.
    """
    content_not_contains: String
    """
    All values not ending with the given string
    """
    content_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    content_not_in: [String]
    """
    All values not starting with the given string.
    """
    content_not_starts_with: String
    """
    All values starting with the given string.
    """
    content_starts_with: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    date: Date
    """
    All values greater than the given value.
    """
    date_gt: Date
    """
    All values greater than or equal the given value.
    """
    date_gte: Date
    """
    All values that are contained in given list.
    """
    date_in: [Date]
    """
    All values less than the given value.
    """
    date_lt: Date
    """
    All values less than or equal the given value.
    """
    date_lte: Date
    """
    Any other value that exists and is not equal to the given value.
    """
    date_not: Date
    """
    All values that are not contained in given list.
    """
    date_not_in: [Date]
    documentInStages_every: PostPageWhereStageInput
    documentInStages_none: PostPageWhereStageInput
    documentInStages_some: PostPageWhereStageInput
    excerpt: String
    """
    All values containing the given string.
    """
    excerpt_contains: String
    """
    All values ending with the given string.
    """
    excerpt_ends_with: String
    """
    All values that are contained in given list.
    """
    excerpt_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    excerpt_not: String
    """
    All values not containing the given string.
    """
    excerpt_not_contains: String
    """
    All values not ending with the given string
    """
    excerpt_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    excerpt_not_in: [String]
    """
    All values not starting with the given string.
    """
    excerpt_not_starts_with: String
    """
    All values starting with the given string.
    """
    excerpt_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    image: AssetWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    relatedPosts_every: PostPageWhereInput
    relatedPosts_none: PostPageWhereInput
    relatedPosts_some: PostPageWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    """
    All values containing the given string.
    """
    slug_contains: String
    """
    All values ending with the given string.
    """
    slug_ends_with: String
    """
    All values that are contained in given list.
    """
    slug_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    slug_not: String
    """
    All values not containing the given string.
    """
    slug_not_contains: String
    """
    All values not ending with the given string
    """
    slug_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    slug_not_in: [String]
    """
    All values not starting with the given string.
    """
    slug_not_starts_with: String
    """
    All values starting with the given string.
    """
    slug_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

enum PostPageOrderByInput {
    categoryIcon_ASC
    categoryIcon_DESC
    category_ASC
    category_DESC
    content_ASC
    content_DESC
    createdAt_ASC
    createdAt_DESC
    date_ASC
    date_DESC
    excerpt_ASC
    excerpt_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    slug_ASC
    slug_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input PostPageUpdateInput {
    author: PersonUpdateOneInlineInput
    category: String
    categoryIcon: String
    cm6xrtx9r10yq07mtd25igfiz: PostPageUpdateManyInlineInput
    content: String
    date: Date
    excerpt: String
    image: AssetUpdateOneInlineInput
    relatedPosts: PostPageUpdateManyInlineInput
    slug: String
    title: String
}

input PostPageUpdateManyInlineInput {
    """
    Connect multiple existing PostPage documents
    """
    connect: [PostPageConnectInput!]
    """
    Create and connect multiple PostPage documents
    """
    create: [PostPageCreateInput!]
    """
    Delete multiple PostPage documents
    """
    delete: [PostPageWhereUniqueInput!]
    """
    Disconnect multiple PostPage documents
    """
    disconnect: [PostPageWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing PostPage documents
    """
    set: [PostPageWhereUniqueInput!]
    """
    Update multiple PostPage documents
    """
    update: [PostPageUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple PostPage documents
    """
    upsert: [PostPageUpsertWithNestedWhereUniqueInput!]
}

input PostPageUpdateManyInput {
    category: String
    categoryIcon: String
    content: String
    date: Date
    excerpt: String
    title: String
}

input PostPageUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: PostPageUpdateManyInput!
    """
    Document search
    """
    where: PostPageWhereInput!
}

input PostPageUpdateOneInlineInput {
    """
    Connect existing PostPage document
    """
    connect: PostPageWhereUniqueInput
    """
    Create and connect one PostPage document
    """
    create: PostPageCreateInput
    """
    Delete currently connected PostPage document
    """
    delete: Boolean
    """
    Disconnect currently connected PostPage document
    """
    disconnect: Boolean
    """
    Update single PostPage document
    """
    update: PostPageUpdateWithNestedWhereUniqueInput
    """
    Upsert single PostPage document
    """
    upsert: PostPageUpsertWithNestedWhereUniqueInput
}

input PostPageUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: PostPageUpdateInput!
    """
    Unique document search
    """
    where: PostPageWhereUniqueInput!
}

input PostPageUpsertInput {
    """
    Create document if it didn't exist
    """
    create: PostPageCreateInput!
    """
    Update document if it exists
    """
    update: PostPageUpdateInput!
}

input PostPageUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: PostPageUpsertInput!
    """
    Unique document search
    """
    where: PostPageWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input PostPageWhereComparatorInput {
    """
    This field can be used to request to check if the entry is outdated by internal comparison
    """
    outdated_to: Boolean
}

"""
Identifies documents
"""
input PostPageWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PostPageWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PostPageWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PostPageWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    author: PersonWhereInput
    category: String
    categoryIcon: String
    """
    All values containing the given string.
    """
    categoryIcon_contains: String
    """
    All values ending with the given string.
    """
    categoryIcon_ends_with: String
    """
    All values that are contained in given list.
    """
    categoryIcon_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    categoryIcon_not: String
    """
    All values not containing the given string.
    """
    categoryIcon_not_contains: String
    """
    All values not ending with the given string
    """
    categoryIcon_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    categoryIcon_not_in: [String]
    """
    All values not starting with the given string.
    """
    categoryIcon_not_starts_with: String
    """
    All values starting with the given string.
    """
    categoryIcon_starts_with: String
    """
    All values containing the given string.
    """
    category_contains: String
    """
    All values ending with the given string.
    """
    category_ends_with: String
    """
    All values that are contained in given list.
    """
    category_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    category_not: String
    """
    All values not containing the given string.
    """
    category_not_contains: String
    """
    All values not ending with the given string
    """
    category_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    category_not_in: [String]
    """
    All values not starting with the given string.
    """
    category_not_starts_with: String
    """
    All values starting with the given string.
    """
    category_starts_with: String
    content: String
    """
    All values containing the given string.
    """
    content_contains: String
    """
    All values ending with the given string.
    """
    content_ends_with: String
    """
    All values that are contained in given list.
    """
    content_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    content_not: String
    """
    All values not containing the given string.
    """
    content_not_contains: String
    """
    All values not ending with the given string
    """
    content_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    content_not_in: [String]
    """
    All values not starting with the given string.
    """
    content_not_starts_with: String
    """
    All values starting with the given string.
    """
    content_starts_with: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    date: Date
    """
    All values greater than the given value.
    """
    date_gt: Date
    """
    All values greater than or equal the given value.
    """
    date_gte: Date
    """
    All values that are contained in given list.
    """
    date_in: [Date]
    """
    All values less than the given value.
    """
    date_lt: Date
    """
    All values less than or equal the given value.
    """
    date_lte: Date
    """
    Any other value that exists and is not equal to the given value.
    """
    date_not: Date
    """
    All values that are not contained in given list.
    """
    date_not_in: [Date]
    documentInStages_every: PostPageWhereStageInput
    documentInStages_none: PostPageWhereStageInput
    documentInStages_some: PostPageWhereStageInput
    excerpt: String
    """
    All values containing the given string.
    """
    excerpt_contains: String
    """
    All values ending with the given string.
    """
    excerpt_ends_with: String
    """
    All values that are contained in given list.
    """
    excerpt_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    excerpt_not: String
    """
    All values not containing the given string.
    """
    excerpt_not_contains: String
    """
    All values not ending with the given string
    """
    excerpt_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    excerpt_not_in: [String]
    """
    All values not starting with the given string.
    """
    excerpt_not_starts_with: String
    """
    All values starting with the given string.
    """
    excerpt_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    image: AssetWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    relatedPosts_every: PostPageWhereInput
    relatedPosts_none: PostPageWhereInput
    relatedPosts_some: PostPageWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    slug: String
    """
    All values containing the given string.
    """
    slug_contains: String
    """
    All values ending with the given string.
    """
    slug_ends_with: String
    """
    All values that are contained in given list.
    """
    slug_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    slug_not: String
    """
    All values not containing the given string.
    """
    slug_not_contains: String
    """
    All values not ending with the given string
    """
    slug_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    slug_not_in: [String]
    """
    All values not starting with the given string.
    """
    slug_not_starts_with: String
    """
    All values starting with the given string.
    """
    slug_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input PostPageWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [PostPageWhereStageInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PostPageWhereStageInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PostPageWhereStageInput!]
    """
    This field contains fields which can be set as true or false to specify an internal comparison
    """
    compareWithParent: PostPageWhereComparatorInput
    """
    Specify the stage to compare with
    """
    stage: Stage
}

"""
References PostPage record uniquely
"""
input PostPageWhereUniqueInput {
    id: ID
    slug: String
}

type PricingPlan implements Entity {
    action(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `action` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `action` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Action
    """
    The unique identifier
    """
    id: ID!
    """
    Surround text with double asterisk "**" to make it bold, e.g., "Team size: **10 developers**"
    """
    planFeatures: [String!]!
    price: String
    """
    System stage field
    """
    stage: Stage!
    subtitle: String
    title: String
}

input PricingPlanConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: PricingPlanWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type PricingPlanConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [PricingPlanEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input PricingPlanCreateInput {
    action: ActionCreateOneInlineInput
    planFeatures: [String!]
    price: String
    subtitle: String
    title: String
}

input PricingPlanCreateManyInlineInput {
    """
    Create and connect multiple existing PricingPlan documents
    """
    create: [PricingPlanCreateInput!]
}

input PricingPlanCreateOneInlineInput {
    """
    Create and connect one PricingPlan document
    """
    create: PricingPlanCreateInput
}

input PricingPlanCreateWithPositionInput {
    """
    Document to create
    """
    data: PricingPlanCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type PricingPlanEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: PricingPlan!
}

"""
Identifies documents
"""
input PricingPlanManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PricingPlanWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PricingPlanWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PricingPlanWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    action: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    """
    Matches if the field array contains *all* items provided to the filter and order does match
    """
    planFeatures: [String!]
    """
    Matches if the field array contains *all* items provided to the filter
    """
    planFeatures_contains_all: [String!]
    """
    Matches if the field array does not contain any of the items provided to the filter
    """
    planFeatures_contains_none: [String!]
    """
    Matches if the field array contains at least one item provided to the filter
    """
    planFeatures_contains_some: [String!]
    """
    Matches if the field array does not contains *all* items provided to the filter or order does not match
    """
    planFeatures_not: [String!]
    price: String
    """
    All values containing the given string.
    """
    price_contains: String
    """
    All values ending with the given string.
    """
    price_ends_with: String
    """
    All values that are contained in given list.
    """
    price_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    price_not: String
    """
    All values not containing the given string.
    """
    price_not_contains: String
    """
    All values not ending with the given string
    """
    price_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    price_not_in: [String]
    """
    All values not starting with the given string.
    """
    price_not_starts_with: String
    """
    All values starting with the given string.
    """
    price_starts_with: String
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum PricingPlanOrderByInput {
    id_ASC
    id_DESC
    planFeatures_ASC
    planFeatures_DESC
    price_ASC
    price_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union PricingPlanParent = PricingSection

input PricingPlanParentConnectInput {
    PricingSection: PricingSectionConnectInput
}

input PricingPlanParentCreateInput {
    PricingSection: PricingSectionCreateInput
}

input PricingPlanParentCreateManyInlineInput {
    """
    Create and connect multiple existing PricingPlanParent documents
    """
    create: [PricingPlanParentCreateInput!]
}

input PricingPlanParentCreateOneInlineInput {
    """
    Create and connect one PricingPlanParent document
    """
    create: PricingPlanParentCreateInput
}

input PricingPlanParentCreateWithPositionInput {
    PricingSection: PricingSectionCreateWithPositionInput
}

input PricingPlanParentUpdateInput {
    PricingSection: PricingSectionUpdateInput
}

input PricingPlanParentUpdateManyInlineInput {
    """
    Create and connect multiple PricingPlanParent component instances
    """
    create: [PricingPlanParentCreateWithPositionInput!]
    """
    Delete multiple PricingPlanParent documents
    """
    delete: [PricingPlanParentWhereUniqueInput!]
    """
    Update multiple PricingPlanParent component instances
    """
    update: [PricingPlanParentUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple PricingPlanParent component instances
    """
    upsert: [PricingPlanParentUpsertWithNestedWhereUniqueAndPositionInput!]
}

input PricingPlanParentUpdateManyWithNestedWhereInput {
    PricingSection: PricingSectionUpdateManyWithNestedWhereInput
}

input PricingPlanParentUpdateOneInlineInput {
    """
    Create and connect one PricingPlanParent document
    """
    create: PricingPlanParentCreateInput
    """
    Delete currently connected PricingPlanParent document
    """
    delete: Boolean
    """
    Update single PricingPlanParent document
    """
    update: PricingPlanParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single PricingPlanParent document
    """
    upsert: PricingPlanParentUpsertWithNestedWhereUniqueInput
}

input PricingPlanParentUpdateWithNestedWhereUniqueAndPositionInput {
    PricingSection: PricingSectionUpdateWithNestedWhereUniqueAndPositionInput
}

input PricingPlanParentUpdateWithNestedWhereUniqueInput {
    PricingSection: PricingSectionUpdateWithNestedWhereUniqueInput
}

input PricingPlanParentUpsertWithNestedWhereUniqueAndPositionInput {
    PricingSection: PricingSectionUpsertWithNestedWhereUniqueAndPositionInput
}

input PricingPlanParentUpsertWithNestedWhereUniqueInput {
    PricingSection: PricingSectionUpsertWithNestedWhereUniqueInput
}

input PricingPlanParentWhereInput {
    PricingSection: PricingSectionWhereInput
}

input PricingPlanParentWhereUniqueInput {
    PricingSection: PricingSectionWhereUniqueInput
}

input PricingPlanUpdateInput {
    action: ActionUpdateOneInlineInput
    planFeatures: [String!]
    price: String
    subtitle: String
    title: String
}

input PricingPlanUpdateManyInlineInput {
    """
    Create and connect multiple PricingPlan component instances
    """
    create: [PricingPlanCreateWithPositionInput!]
    """
    Delete multiple PricingPlan documents
    """
    delete: [PricingPlanWhereUniqueInput!]
    """
    Update multiple PricingPlan component instances
    """
    update: [PricingPlanUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple PricingPlan component instances
    """
    upsert: [PricingPlanUpsertWithNestedWhereUniqueAndPositionInput!]
}

input PricingPlanUpdateManyInput {
    planFeatures: [String!]
    price: String
    subtitle: String
    title: String
}

input PricingPlanUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: PricingPlanUpdateManyInput!
    """
    Document search
    """
    where: PricingPlanWhereInput!
}

input PricingPlanUpdateOneInlineInput {
    """
    Create and connect one PricingPlan document
    """
    create: PricingPlanCreateInput
    """
    Delete currently connected PricingPlan document
    """
    delete: Boolean
    """
    Update single PricingPlan document
    """
    update: PricingPlanUpdateWithNestedWhereUniqueInput
    """
    Upsert single PricingPlan document
    """
    upsert: PricingPlanUpsertWithNestedWhereUniqueInput
}

input PricingPlanUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: PricingPlanUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: PricingPlanWhereUniqueInput!
}

input PricingPlanUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: PricingPlanUpdateInput!
    """
    Unique document search
    """
    where: PricingPlanWhereUniqueInput!
}

input PricingPlanUpsertInput {
    """
    Create document if it didn't exist
    """
    create: PricingPlanCreateInput!
    """
    Update document if it exists
    """
    update: PricingPlanUpdateInput!
}

input PricingPlanUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: PricingPlanUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: PricingPlanWhereUniqueInput!
}

input PricingPlanUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: PricingPlanUpsertInput!
    """
    Unique document search
    """
    where: PricingPlanWhereUniqueInput!
}

"""
Identifies documents
"""
input PricingPlanWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PricingPlanWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PricingPlanWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PricingPlanWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    action: ActionWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    """
    Matches if the field array contains *all* items provided to the filter and order does match
    """
    planFeatures: [String!]
    """
    Matches if the field array contains *all* items provided to the filter
    """
    planFeatures_contains_all: [String!]
    """
    Matches if the field array does not contain any of the items provided to the filter
    """
    planFeatures_contains_none: [String!]
    """
    Matches if the field array contains at least one item provided to the filter
    """
    planFeatures_contains_some: [String!]
    """
    Matches if the field array does not contains *all* items provided to the filter or order does not match
    """
    planFeatures_not: [String!]
    price: String
    """
    All values containing the given string.
    """
    price_contains: String
    """
    All values ending with the given string.
    """
    price_ends_with: String
    """
    All values that are contained in given list.
    """
    price_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    price_not: String
    """
    All values not containing the given string.
    """
    price_not_contains: String
    """
    All values not ending with the given string
    """
    price_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    price_not_in: [String]
    """
    All values not starting with the given string.
    """
    price_not_starts_with: String
    """
    All values starting with the given string.
    """
    price_starts_with: String
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References PricingPlan record uniquely
"""
input PricingPlanWhereUniqueInput {
    id: ID
}

type PricingSection implements Entity {
    """
    The unique identifier
    """
    id: ID!
    pricingPlans(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `pricingPlans` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `pricingPlans` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: PricingPlanOrderByInput
        skip: Int
        where: PricingPlanWhereInput
    ): [PricingPlan!]!
    """
    System stage field
    """
    stage: Stage!
    """
    The subtitle is shown under the section's title.
    """
    subtitle: String
    """
    The section's title.
    """
    title: String
}

input PricingSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: PricingSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type PricingSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [PricingSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input PricingSectionCreateInput {
    pricingPlans: PricingPlanCreateManyInlineInput
    subtitle: String
    title: String
}

input PricingSectionCreateManyInlineInput {
    """
    Create and connect multiple existing PricingSection documents
    """
    create: [PricingSectionCreateInput!]
}

input PricingSectionCreateOneInlineInput {
    """
    Create and connect one PricingSection document
    """
    create: PricingSectionCreateInput
}

input PricingSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: PricingSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type PricingSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: PricingSection!
}

"""
Identifies documents
"""
input PricingSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PricingSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PricingSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PricingSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    pricingPlans_every: PricingPlanWhereInput
    pricingPlans_none: PricingPlanWhereInput
    pricingPlans_some: PricingPlanWhereInput
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

enum PricingSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
}

union PricingSectionParent = LandingPage

input PricingSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input PricingSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input PricingSectionParentCreateManyInlineInput {
    """
    Connect multiple existing PricingSectionParent documents
    """
    connect: [PricingSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing PricingSectionParent documents
    """
    create: [PricingSectionParentCreateInput!]
}

input PricingSectionParentCreateOneInlineInput {
    """
    Connect one existing PricingSectionParent document
    """
    connect: PricingSectionParentWhereUniqueInput
    """
    Create and connect one PricingSectionParent document
    """
    create: PricingSectionParentCreateInput
}

input PricingSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input PricingSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing PricingSectionParent documents
    """
    connect: [PricingSectionParentConnectInput!]
    """
    Create and connect multiple PricingSectionParent documents
    """
    create: [PricingSectionParentCreateInput!]
    """
    Delete multiple PricingSectionParent documents
    """
    delete: [PricingSectionParentWhereUniqueInput!]
    """
    Disconnect multiple PricingSectionParent documents
    """
    disconnect: [PricingSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing PricingSectionParent documents
    """
    set: [PricingSectionParentWhereUniqueInput!]
    """
    Update multiple PricingSectionParent documents
    """
    update: [PricingSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple PricingSectionParent documents
    """
    upsert: [PricingSectionParentUpsertWithNestedWhereUniqueInput!]
}

input PricingSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input PricingSectionParentUpdateOneInlineInput {
    """
    Connect existing PricingSectionParent document
    """
    connect: PricingSectionParentWhereUniqueInput
    """
    Create and connect one PricingSectionParent document
    """
    create: PricingSectionParentCreateInput
    """
    Delete currently connected PricingSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected PricingSectionParent document
    """
    disconnect: Boolean
    """
    Update single PricingSectionParent document
    """
    update: PricingSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single PricingSectionParent document
    """
    upsert: PricingSectionParentUpsertWithNestedWhereUniqueInput
}

input PricingSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input PricingSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input PricingSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input PricingSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input PricingSectionUpdateInput {
    pricingPlans: PricingPlanUpdateManyInlineInput
    subtitle: String
    title: String
}

input PricingSectionUpdateManyInlineInput {
    """
    Create and connect multiple PricingSection component instances
    """
    create: [PricingSectionCreateWithPositionInput!]
    """
    Delete multiple PricingSection documents
    """
    delete: [PricingSectionWhereUniqueInput!]
    """
    Update multiple PricingSection component instances
    """
    update: [PricingSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple PricingSection component instances
    """
    upsert: [PricingSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input PricingSectionUpdateManyInput {
    subtitle: String
    title: String
}

input PricingSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: PricingSectionUpdateManyInput!
    """
    Document search
    """
    where: PricingSectionWhereInput!
}

input PricingSectionUpdateOneInlineInput {
    """
    Create and connect one PricingSection document
    """
    create: PricingSectionCreateInput
    """
    Delete currently connected PricingSection document
    """
    delete: Boolean
    """
    Update single PricingSection document
    """
    update: PricingSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single PricingSection document
    """
    upsert: PricingSectionUpsertWithNestedWhereUniqueInput
}

input PricingSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: PricingSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: PricingSectionWhereUniqueInput!
}

input PricingSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: PricingSectionUpdateInput!
    """
    Unique document search
    """
    where: PricingSectionWhereUniqueInput!
}

input PricingSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: PricingSectionCreateInput!
    """
    Update document if it exists
    """
    update: PricingSectionUpdateInput!
}

input PricingSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: PricingSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: PricingSectionWhereUniqueInput!
}

input PricingSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: PricingSectionUpsertInput!
    """
    Unique document search
    """
    where: PricingSectionWhereUniqueInput!
}

"""
Identifies documents
"""
input PricingSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [PricingSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [PricingSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [PricingSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    pricingPlans_every: PricingPlanWhereInput
    pricingPlans_none: PricingPlanWhereInput
    pricingPlans_some: PricingPlanWhereInput
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
}

"""
References PricingSection record uniquely
"""
input PricingSectionWhereUniqueInput {
    id: ID
}

input PublishLocaleInput {
    """
    Locales to publish
    """
    locale: Locale!
    """
    Stages to publish selected locales to
    """
    stages: [Stage!]!
}

type Query {
    """
    Retrieve a single asset
    """
    asset(
        """
        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: AssetWhereUniqueInput!
    ): Asset
    """
    Retrieve document version
    """
    assetVersion(where: VersionWhereInput!): DocumentVersion
    """
    Retrieve multiple assets
    """
    assets(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: AssetOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: AssetWhereInput
    ): [Asset!]!
    """
    Retrieve multiple assets using the Relay connection interface
    """
    assetsConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `Asset` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: AssetOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: AssetWhereInput
    ): AssetConnection!
    """
    Fetches an object given its ID
    """
    entities(
        """
        Defines which locales to query for
        """
        locales: [Locale!]
        """
        The where parameters to query components
        """
        where: [EntityWhereInput!]!
    ): [Entity!]
    """
    Retrieve a single landingPage
    """
    landingPage(
        """
        Defines which locales should be returned.

        Note that `LandingPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: LandingPageWhereUniqueInput!
    ): LandingPage
    """
    Retrieve document version
    """
    landingPageVersion(where: VersionWhereInput!): DocumentVersion
    """
    Retrieve multiple landingPages
    """
    landingPages(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `LandingPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: LandingPageOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: LandingPageWhereInput
    ): [LandingPage!]!
    """
    Retrieve multiple landingPages using the Relay connection interface
    """
    landingPagesConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `LandingPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: LandingPageOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: LandingPageWhereInput
    ): LandingPageConnection!
    """
    Fetches an object given its ID
    """
    node(
        """
        The ID of an object
        """
        id: ID!
        """
        Defines which locales should be returned.

        Note that `Node` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
    ): Node
    """
    Retrieve multiple people
    """
    people(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `Person` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: PersonOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: PersonWhereInput
    ): [Person!]!
    """
    Retrieve multiple people using the Relay connection interface
    """
    peopleConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `Person` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: PersonOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: PersonWhereInput
    ): PersonConnection!
    """
    Retrieve a single person
    """
    person(
        """
        Defines which locales should be returned.

        Note that `Person` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: PersonWhereUniqueInput!
    ): Person
    """
    Retrieve document version
    """
    personVersion(where: VersionWhereInput!): DocumentVersion
    """
    Retrieve a single postPage
    """
    postPage(
        """
        Defines which locales should be returned.

        Note that `PostPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: PostPageWhereUniqueInput!
    ): PostPage
    """
    Retrieve document version
    """
    postPageVersion(where: VersionWhereInput!): DocumentVersion
    """
    Retrieve multiple postPages
    """
    postPages(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `PostPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: PostPageOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: PostPageWhereInput
    ): [PostPage!]!
    """
    Retrieve multiple postPages using the Relay connection interface
    """
    postPagesConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `PostPage` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: PostPageOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: PostPageWhereInput
    ): PostPageConnection!
    """
    Retrieve a single scheduledOperation
    """
    scheduledOperation(
        """
        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: ScheduledOperationWhereUniqueInput!
    ): ScheduledOperation
    """
    Retrieve multiple scheduledOperations
    """
    scheduledOperations(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: ScheduledOperationOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    """
    Retrieve multiple scheduledOperations using the Relay connection interface
    """
    scheduledOperationsConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `ScheduledOperation` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: ScheduledOperationOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: ScheduledOperationWhereInput
    ): ScheduledOperationConnection!
    """
    Retrieve a single scheduledRelease
    """
    scheduledRelease(
        """
        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: ScheduledReleaseWhereUniqueInput!
    ): ScheduledRelease
    """
    Retrieve multiple scheduledReleases
    """
    scheduledReleases(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: ScheduledReleaseOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: ScheduledReleaseWhereInput
    ): [ScheduledRelease!]!
    """
    Retrieve multiple scheduledReleases using the Relay connection interface
    """
    scheduledReleasesConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `ScheduledRelease` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: ScheduledReleaseOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: ScheduledReleaseWhereInput
    ): ScheduledReleaseConnection!
    """
    Retrieve a single siteConfig
    """
    siteConfig(
        """
        Defines which locales should be returned.

        Note that `SiteConfig` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: SiteConfigWhereUniqueInput!
    ): SiteConfig
    """
    Retrieve document version
    """
    siteConfigVersion(where: VersionWhereInput!): DocumentVersion
    """
    Retrieve multiple siteConfigs
    """
    siteConfigs(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `SiteConfig` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: SiteConfigOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: SiteConfigWhereInput
    ): [SiteConfig!]!
    """
    Retrieve multiple siteConfigs using the Relay connection interface
    """
    siteConfigsConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `SiteConfig` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: SiteConfigOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: SiteConfigWhereInput
    ): SiteConfigConnection!
    """
    Retrieve a single user
    """
    user(
        """
        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        stage: Stage! = PUBLISHED
        where: UserWhereUniqueInput!
    ): User
    """
    Retrieve multiple users
    """
    users(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: UserOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: UserWhereInput
    ): [User!]!
    """
    Retrieve multiple users using the Relay connection interface
    """
    usersConnection(
        after: String
        before: String
        first: Int
        last: Int
        """
        Defines which locales should be returned.

        Note that `User` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument may be overwritten by another locales definition in a relational child field, this will effectively use the overwritten argument for the affected query's subtree.
        """
        locales: [Locale!]! = [en]
        orderBy: UserOrderByInput
        skip: Int
        stage: Stage! = PUBLISHED
        where: UserWhereInput
    ): UserConnection!
    __schema: __Schema!
    __type(name: String!): __Type
}

"""
Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
type RGBA {
    a: RGBATransparency!
    b: RGBAHue!
    g: RGBAHue!
    r: RGBAHue!
}

scalar RGBAHue

"""
Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()
"""
input RGBAInput {
    a: RGBATransparency!
    b: RGBAHue!
    g: RGBAHue!
    r: RGBAHue!
}

scalar RGBATransparency

"""
Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values
"""
type RichText {
    """
    Returns HTMl representation
    """
    html: String!
    """
    Returns Markdown representation
    """
    markdown: String!
    """
    Returns AST representation
    """
    raw: RichTextAST!
    """
    Returns plain-text contents of RichText
    """
    text: String!
}

"""
Slate-compatible RichText AST
"""
scalar RichTextAST

"""
Scheduled Operation system model
"""
type ScheduledOperation implements Entity & Node {
    affectedDocuments(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `affectedDocuments` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
    ): [ScheduledOperationAffectedDocument!]!
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Operation description
    """
    description: String
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [ScheduledOperation!]!
    """
    Operation error message
    """
    errorMessage: String
    """
    The unique identifier
    """
    id: ID!
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Raw operation payload including all details, this field is subject to change
    """
    rawPayload: Json!
    """
    The release this operation is scheduled for
    """
    release(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `release` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): ScheduledRelease
    """
    System stage field
    """
    stage: Stage!
    """
    operation Status
    """
    status: ScheduledOperationStatus!
    """
    The time the document was updated
    """
    updatedAt: DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

union ScheduledOperationAffectedDocument = Asset | LandingPage | Person | PostPage | SiteConfig

input ScheduledOperationConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: ScheduledOperationWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type ScheduledOperationConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [ScheduledOperationEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input ScheduledOperationCreateManyInlineInput {
    """
    Connect multiple existing ScheduledOperation documents
    """
    connect: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationCreateOneInlineInput {
    """
    Connect one existing ScheduledOperation document
    """
    connect: ScheduledOperationWhereUniqueInput
}

"""
An edge in a connection.
"""
type ScheduledOperationEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: ScheduledOperation!
}

"""
Identifies documents
"""
input ScheduledOperationManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ScheduledOperationWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ScheduledOperationWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ScheduledOperationWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    """
    All values containing the given string.
    """
    description_contains: String
    """
    All values ending with the given string.
    """
    description_ends_with: String
    """
    All values that are contained in given list.
    """
    description_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    description_not: String
    """
    All values not containing the given string.
    """
    description_not_contains: String
    """
    All values not ending with the given string
    """
    description_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    description_not_in: [String]
    """
    All values not starting with the given string.
    """
    description_not_starts_with: String
    """
    All values starting with the given string.
    """
    description_starts_with: String
    errorMessage: String
    """
    All values containing the given string.
    """
    errorMessage_contains: String
    """
    All values ending with the given string.
    """
    errorMessage_ends_with: String
    """
    All values that are contained in given list.
    """
    errorMessage_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    errorMessage_not: String
    """
    All values not containing the given string.
    """
    errorMessage_not_contains: String
    """
    All values not ending with the given string
    """
    errorMessage_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    errorMessage_not_in: [String]
    """
    All values not starting with the given string.
    """
    errorMessage_not_starts_with: String
    """
    All values starting with the given string.
    """
    errorMessage_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    """
    All values containing the given json path.
    """
    rawPayload_json_path_exists: String
    """
    Recursively tries to find the provided JSON scalar value inside the field.
    It does use an exact match when comparing values.
    If you pass `null` as value the filter will be ignored.
    Note: This filter fails if you try to look for a non scalar JSON value!
    """
    rawPayload_value_recursive: Json
    release: ScheduledReleaseWhereInput
    status: ScheduledOperationStatus
    """
    All values that are contained in given list.
    """
    status_in: [ScheduledOperationStatus]
    """
    Any other value that exists and is not equal to the given value.
    """
    status_not: ScheduledOperationStatus
    """
    All values that are not contained in given list.
    """
    status_not_in: [ScheduledOperationStatus]
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

enum ScheduledOperationOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    errorMessage_ASC
    errorMessage_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    status_ASC
    status_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"""
System Scheduled Operation Status
"""
enum ScheduledOperationStatus {
    CANCELED
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

input ScheduledOperationUpdateManyInlineInput {
    """
    Connect multiple existing ScheduledOperation documents
    """
    connect: [ScheduledOperationConnectInput!]
    """
    Disconnect multiple ScheduledOperation documents
    """
    disconnect: [ScheduledOperationWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing ScheduledOperation documents
    """
    set: [ScheduledOperationWhereUniqueInput!]
}

input ScheduledOperationUpdateOneInlineInput {
    """
    Connect existing ScheduledOperation document
    """
    connect: ScheduledOperationWhereUniqueInput
    """
    Disconnect currently connected ScheduledOperation document
    """
    disconnect: Boolean
}

"""
Identifies documents
"""
input ScheduledOperationWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ScheduledOperationWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ScheduledOperationWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ScheduledOperationWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    """
    All values containing the given string.
    """
    description_contains: String
    """
    All values ending with the given string.
    """
    description_ends_with: String
    """
    All values that are contained in given list.
    """
    description_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    description_not: String
    """
    All values not containing the given string.
    """
    description_not_contains: String
    """
    All values not ending with the given string
    """
    description_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    description_not_in: [String]
    """
    All values not starting with the given string.
    """
    description_not_starts_with: String
    """
    All values starting with the given string.
    """
    description_starts_with: String
    errorMessage: String
    """
    All values containing the given string.
    """
    errorMessage_contains: String
    """
    All values ending with the given string.
    """
    errorMessage_ends_with: String
    """
    All values that are contained in given list.
    """
    errorMessage_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    errorMessage_not: String
    """
    All values not containing the given string.
    """
    errorMessage_not_contains: String
    """
    All values not ending with the given string
    """
    errorMessage_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    errorMessage_not_in: [String]
    """
    All values not starting with the given string.
    """
    errorMessage_not_starts_with: String
    """
    All values starting with the given string.
    """
    errorMessage_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    """
    All values containing the given json path.
    """
    rawPayload_json_path_exists: String
    """
    Recursively tries to find the provided JSON scalar value inside the field.
    It does use an exact match when comparing values.
    If you pass `null` as value the filter will be ignored.
    Note: This filter fails if you try to look for a non scalar JSON value!
    """
    rawPayload_value_recursive: Json
    release: ScheduledReleaseWhereInput
    status: ScheduledOperationStatus
    """
    All values that are contained in given list.
    """
    status_in: [ScheduledOperationStatus]
    """
    Any other value that exists and is not equal to the given value.
    """
    status_not: ScheduledOperationStatus
    """
    All values that are not contained in given list.
    """
    status_not_in: [ScheduledOperationStatus]
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"""
References ScheduledOperation record uniquely
"""
input ScheduledOperationWhereUniqueInput {
    id: ID
}

"""
Scheduled Release system model
"""
type ScheduledRelease implements Entity & Node {
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Release description
    """
    description: String
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [ScheduledRelease!]!
    """
    Release error message
    """
    errorMessage: String
    """
    The unique identifier
    """
    id: ID!
    """
    Whether scheduled release should be run
    """
    isActive: Boolean!
    """
    Whether scheduled release is implicit
    """
    isImplicit: Boolean!
    """
    Operations to run with this release
    """
    operations(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `operations` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: ScheduledOperationOrderByInput
        skip: Int
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Release date and time
    """
    releaseAt: DateTime
    """
    System stage field
    """
    stage: Stage!
    """
    Release Status
    """
    status: ScheduledReleaseStatus!
    """
    Release Title
    """
    title: String
    """
    The time the document was updated
    """
    updatedAt: DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

input ScheduledReleaseConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: ScheduledReleaseWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type ScheduledReleaseConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [ScheduledReleaseEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input ScheduledReleaseCreateInput {
    createdAt: DateTime
    description: String
    errorMessage: String
    isActive: Boolean = true
    releaseAt: DateTime
    title: String
    updatedAt: DateTime
}

input ScheduledReleaseCreateManyInlineInput {
    """
    Connect multiple existing ScheduledRelease documents
    """
    connect: [ScheduledReleaseWhereUniqueInput!]
    """
    Create and connect multiple existing ScheduledRelease documents
    """
    create: [ScheduledReleaseCreateInput!]
}

input ScheduledReleaseCreateOneInlineInput {
    """
    Connect one existing ScheduledRelease document
    """
    connect: ScheduledReleaseWhereUniqueInput
    """
    Create and connect one ScheduledRelease document
    """
    create: ScheduledReleaseCreateInput
}

"""
An edge in a connection.
"""
type ScheduledReleaseEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: ScheduledRelease!
}

"""
Identifies documents
"""
input ScheduledReleaseManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ScheduledReleaseWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ScheduledReleaseWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ScheduledReleaseWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    """
    All values containing the given string.
    """
    description_contains: String
    """
    All values ending with the given string.
    """
    description_ends_with: String
    """
    All values that are contained in given list.
    """
    description_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    description_not: String
    """
    All values not containing the given string.
    """
    description_not_contains: String
    """
    All values not ending with the given string
    """
    description_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    description_not_in: [String]
    """
    All values not starting with the given string.
    """
    description_not_starts_with: String
    """
    All values starting with the given string.
    """
    description_starts_with: String
    errorMessage: String
    """
    All values containing the given string.
    """
    errorMessage_contains: String
    """
    All values ending with the given string.
    """
    errorMessage_ends_with: String
    """
    All values that are contained in given list.
    """
    errorMessage_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    errorMessage_not: String
    """
    All values not containing the given string.
    """
    errorMessage_not_contains: String
    """
    All values not ending with the given string
    """
    errorMessage_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    errorMessage_not_in: [String]
    """
    All values not starting with the given string.
    """
    errorMessage_not_starts_with: String
    """
    All values starting with the given string.
    """
    errorMessage_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    isActive: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    isActive_not: Boolean
    isImplicit: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    isImplicit_not: Boolean
    operations_every: ScheduledOperationWhereInput
    operations_none: ScheduledOperationWhereInput
    operations_some: ScheduledOperationWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    releaseAt: DateTime
    """
    All values greater than the given value.
    """
    releaseAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    releaseAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    releaseAt_in: [DateTime]
    """
    All values less than the given value.
    """
    releaseAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    releaseAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    releaseAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    releaseAt_not_in: [DateTime]
    status: ScheduledReleaseStatus
    """
    All values that are contained in given list.
    """
    status_in: [ScheduledReleaseStatus]
    """
    Any other value that exists and is not equal to the given value.
    """
    status_not: ScheduledReleaseStatus
    """
    All values that are not contained in given list.
    """
    status_not_in: [ScheduledReleaseStatus]
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

enum ScheduledReleaseOrderByInput {
    createdAt_ASC
    createdAt_DESC
    description_ASC
    description_DESC
    errorMessage_ASC
    errorMessage_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    isImplicit_ASC
    isImplicit_DESC
    publishedAt_ASC
    publishedAt_DESC
    releaseAt_ASC
    releaseAt_DESC
    status_ASC
    status_DESC
    title_ASC
    title_DESC
    updatedAt_ASC
    updatedAt_DESC
}

"""
System Scheduled Release Status
"""
enum ScheduledReleaseStatus {
    COMPLETED
    FAILED
    IN_PROGRESS
    PENDING
}

input ScheduledReleaseUpdateInput {
    description: String
    errorMessage: String
    isActive: Boolean
    releaseAt: DateTime
    title: String
}

input ScheduledReleaseUpdateManyInlineInput {
    """
    Connect multiple existing ScheduledRelease documents
    """
    connect: [ScheduledReleaseConnectInput!]
    """
    Create and connect multiple ScheduledRelease documents
    """
    create: [ScheduledReleaseCreateInput!]
    """
    Delete multiple ScheduledRelease documents
    """
    delete: [ScheduledReleaseWhereUniqueInput!]
    """
    Disconnect multiple ScheduledRelease documents
    """
    disconnect: [ScheduledReleaseWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing ScheduledRelease documents
    """
    set: [ScheduledReleaseWhereUniqueInput!]
    """
    Update multiple ScheduledRelease documents
    """
    update: [ScheduledReleaseUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple ScheduledRelease documents
    """
    upsert: [ScheduledReleaseUpsertWithNestedWhereUniqueInput!]
}

input ScheduledReleaseUpdateManyInput {
    description: String
    errorMessage: String
    isActive: Boolean
    releaseAt: DateTime
    title: String
}

input ScheduledReleaseUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: ScheduledReleaseUpdateManyInput!
    """
    Document search
    """
    where: ScheduledReleaseWhereInput!
}

input ScheduledReleaseUpdateOneInlineInput {
    """
    Connect existing ScheduledRelease document
    """
    connect: ScheduledReleaseWhereUniqueInput
    """
    Create and connect one ScheduledRelease document
    """
    create: ScheduledReleaseCreateInput
    """
    Delete currently connected ScheduledRelease document
    """
    delete: Boolean
    """
    Disconnect currently connected ScheduledRelease document
    """
    disconnect: Boolean
    """
    Update single ScheduledRelease document
    """
    update: ScheduledReleaseUpdateWithNestedWhereUniqueInput
    """
    Upsert single ScheduledRelease document
    """
    upsert: ScheduledReleaseUpsertWithNestedWhereUniqueInput
}

input ScheduledReleaseUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: ScheduledReleaseUpdateInput!
    """
    Unique document search
    """
    where: ScheduledReleaseWhereUniqueInput!
}

input ScheduledReleaseUpsertInput {
    """
    Create document if it didn't exist
    """
    create: ScheduledReleaseCreateInput!
    """
    Update document if it exists
    """
    update: ScheduledReleaseUpdateInput!
}

input ScheduledReleaseUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: ScheduledReleaseUpsertInput!
    """
    Unique document search
    """
    where: ScheduledReleaseWhereUniqueInput!
}

"""
Identifies documents
"""
input ScheduledReleaseWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [ScheduledReleaseWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [ScheduledReleaseWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [ScheduledReleaseWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    description: String
    """
    All values containing the given string.
    """
    description_contains: String
    """
    All values ending with the given string.
    """
    description_ends_with: String
    """
    All values that are contained in given list.
    """
    description_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    description_not: String
    """
    All values not containing the given string.
    """
    description_not_contains: String
    """
    All values not ending with the given string
    """
    description_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    description_not_in: [String]
    """
    All values not starting with the given string.
    """
    description_not_starts_with: String
    """
    All values starting with the given string.
    """
    description_starts_with: String
    errorMessage: String
    """
    All values containing the given string.
    """
    errorMessage_contains: String
    """
    All values ending with the given string.
    """
    errorMessage_ends_with: String
    """
    All values that are contained in given list.
    """
    errorMessage_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    errorMessage_not: String
    """
    All values not containing the given string.
    """
    errorMessage_not_contains: String
    """
    All values not ending with the given string
    """
    errorMessage_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    errorMessage_not_in: [String]
    """
    All values not starting with the given string.
    """
    errorMessage_not_starts_with: String
    """
    All values starting with the given string.
    """
    errorMessage_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    isActive: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    isActive_not: Boolean
    isImplicit: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    isImplicit_not: Boolean
    operations_every: ScheduledOperationWhereInput
    operations_none: ScheduledOperationWhereInput
    operations_some: ScheduledOperationWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    releaseAt: DateTime
    """
    All values greater than the given value.
    """
    releaseAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    releaseAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    releaseAt_in: [DateTime]
    """
    All values less than the given value.
    """
    releaseAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    releaseAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    releaseAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    releaseAt_not_in: [DateTime]
    status: ScheduledReleaseStatus
    """
    All values that are contained in given list.
    """
    status_in: [ScheduledReleaseStatus]
    """
    Any other value that exists and is not equal to the given value.
    """
    status_not: ScheduledReleaseStatus
    """
    All values that are not contained in given list.
    """
    status_not_in: [ScheduledReleaseStatus]
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"""
References ScheduledRelease record uniquely
"""
input ScheduledReleaseWhereUniqueInput {
    id: ID
}

type SiteConfig implements Entity & Node {
    companyLogo(
        """
        Sets the locale of the parent document as the first locale in the fallback locales in the query's subtree.

        Note that `companyLogo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `companyLogo` will be affected directly by this argument, as well as any other related models with localized fields in the query's subtree.
        The first locale matching the provided list will be returned, localized entries that do not have the provided locale defined will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        where: AssetSingleRelationWhereInput
    ): Asset!
    companyTitle: String!
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    User that created this document
    """
    createdBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `createdBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [SiteConfig!]!
    footer(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `footer` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `footer` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): Footer!
    """
    List of SiteConfig versions
    """
    history(
        limit: Int! = 10
        skip: Int! = 0
        """
        This is optional and can be used to fetch the document version history for a specific stage instead of the current one
        """
        stageOverride: Stage
    ): [Version!]!
    """
    The unique identifier
    """
    id: ID!
    navbar(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `navbar` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `navbar` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): NavigationBar!
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    User that last published this document
    """
    publishedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `publishedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
    scheduledIn(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `scheduledIn` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        skip: Int
        where: ScheduledOperationWhereInput
    ): [ScheduledOperation!]!
    """
    System stage field
    """
    stage: Stage!
    """
    The time the document was updated
    """
    updatedAt: DateTime!
    """
    User that last updated this document
    """
    updatedBy(
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `updatedBy` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
    ): User
}

input SiteConfigConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: SiteConfigWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type SiteConfigConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [SiteConfigEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input SiteConfigCreateInput {
    companyLogo: AssetCreateOneInlineInput!
    companyTitle: String!
    createdAt: DateTime
    footer: FooterCreateOneInlineInput!
    navbar: NavigationBarCreateOneInlineInput!
    updatedAt: DateTime
}

input SiteConfigCreateManyInlineInput {
    """
    Connect multiple existing SiteConfig documents
    """
    connect: [SiteConfigWhereUniqueInput!]
    """
    Create and connect multiple existing SiteConfig documents
    """
    create: [SiteConfigCreateInput!]
}

input SiteConfigCreateOneInlineInput {
    """
    Connect one existing SiteConfig document
    """
    connect: SiteConfigWhereUniqueInput
    """
    Create and connect one SiteConfig document
    """
    create: SiteConfigCreateInput
}

"""
An edge in a connection.
"""
type SiteConfigEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: SiteConfig!
}

"""
Identifies documents
"""
input SiteConfigManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [SiteConfigWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [SiteConfigWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [SiteConfigWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    companyLogo: AssetWhereInput
    companyTitle: String
    """
    All values containing the given string.
    """
    companyTitle_contains: String
    """
    All values ending with the given string.
    """
    companyTitle_ends_with: String
    """
    All values that are contained in given list.
    """
    companyTitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    companyTitle_not: String
    """
    All values not containing the given string.
    """
    companyTitle_not_contains: String
    """
    All values not ending with the given string
    """
    companyTitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    companyTitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    companyTitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    companyTitle_starts_with: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: SiteConfigWhereStageInput
    documentInStages_none: SiteConfigWhereStageInput
    documentInStages_some: SiteConfigWhereStageInput
    footer: FooterWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    navbar: NavigationBarWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

enum SiteConfigOrderByInput {
    companyTitle_ASC
    companyTitle_DESC
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input SiteConfigUpdateInput {
    companyLogo: AssetUpdateOneInlineInput
    companyTitle: String
    footer: FooterUpdateOneInlineInput
    navbar: NavigationBarUpdateOneInlineInput
}

input SiteConfigUpdateManyInlineInput {
    """
    Connect multiple existing SiteConfig documents
    """
    connect: [SiteConfigConnectInput!]
    """
    Create and connect multiple SiteConfig documents
    """
    create: [SiteConfigCreateInput!]
    """
    Delete multiple SiteConfig documents
    """
    delete: [SiteConfigWhereUniqueInput!]
    """
    Disconnect multiple SiteConfig documents
    """
    disconnect: [SiteConfigWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing SiteConfig documents
    """
    set: [SiteConfigWhereUniqueInput!]
    """
    Update multiple SiteConfig documents
    """
    update: [SiteConfigUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple SiteConfig documents
    """
    upsert: [SiteConfigUpsertWithNestedWhereUniqueInput!]
}

input SiteConfigUpdateManyInput {
    companyTitle: String
}

input SiteConfigUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: SiteConfigUpdateManyInput!
    """
    Document search
    """
    where: SiteConfigWhereInput!
}

input SiteConfigUpdateOneInlineInput {
    """
    Connect existing SiteConfig document
    """
    connect: SiteConfigWhereUniqueInput
    """
    Create and connect one SiteConfig document
    """
    create: SiteConfigCreateInput
    """
    Delete currently connected SiteConfig document
    """
    delete: Boolean
    """
    Disconnect currently connected SiteConfig document
    """
    disconnect: Boolean
    """
    Update single SiteConfig document
    """
    update: SiteConfigUpdateWithNestedWhereUniqueInput
    """
    Upsert single SiteConfig document
    """
    upsert: SiteConfigUpsertWithNestedWhereUniqueInput
}

input SiteConfigUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: SiteConfigUpdateInput!
    """
    Unique document search
    """
    where: SiteConfigWhereUniqueInput!
}

input SiteConfigUpsertInput {
    """
    Create document if it didn't exist
    """
    create: SiteConfigCreateInput!
    """
    Update document if it exists
    """
    update: SiteConfigUpdateInput!
}

input SiteConfigUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: SiteConfigUpsertInput!
    """
    Unique document search
    """
    where: SiteConfigWhereUniqueInput!
}

"""
This contains a set of filters that can be used to compare values internally
"""
input SiteConfigWhereComparatorInput {
    """
    This field can be used to request to check if the entry is outdated by internal comparison
    """
    outdated_to: Boolean
}

"""
Identifies documents
"""
input SiteConfigWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [SiteConfigWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [SiteConfigWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [SiteConfigWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    companyLogo: AssetWhereInput
    companyTitle: String
    """
    All values containing the given string.
    """
    companyTitle_contains: String
    """
    All values ending with the given string.
    """
    companyTitle_ends_with: String
    """
    All values that are contained in given list.
    """
    companyTitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    companyTitle_not: String
    """
    All values not containing the given string.
    """
    companyTitle_not_contains: String
    """
    All values not ending with the given string
    """
    companyTitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    companyTitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    companyTitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    companyTitle_starts_with: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    createdBy: UserWhereInput
    documentInStages_every: SiteConfigWhereStageInput
    documentInStages_none: SiteConfigWhereStageInput
    documentInStages_some: SiteConfigWhereStageInput
    footer: FooterWhereInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    navbar: NavigationBarWhereInput
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    publishedBy: UserWhereInput
    scheduledIn_every: ScheduledOperationWhereInput
    scheduledIn_none: ScheduledOperationWhereInput
    scheduledIn_some: ScheduledOperationWhereInput
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
    updatedBy: UserWhereInput
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input SiteConfigWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [SiteConfigWhereStageInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [SiteConfigWhereStageInput!]
    """
    Logical OR on all given filters.
    """
    OR: [SiteConfigWhereStageInput!]
    """
    This field contains fields which can be set as true or false to specify an internal comparison
    """
    compareWithParent: SiteConfigWhereComparatorInput
    """
    Specify the stage to compare with
    """
    stage: Stage
}

"""
References SiteConfig record uniquely
"""
input SiteConfigWhereUniqueInput {
    id: ID
}

"""
Social icon link component used in team section.
"""
type SocialIconLink implements Entity {
    """
    The icon name must match one of the icon names from flaticon.com, e.g., "fi-brands-instagram"
    """
    iconName: String!
    """
    The unique identifier
    """
    id: ID!
    label: String!
    """
    System stage field
    """
    stage: Stage!
    url: String
}

input SocialIconLinkConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: SocialIconLinkWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type SocialIconLinkConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [SocialIconLinkEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input SocialIconLinkCreateInput {
    iconName: String!
    label: String!
    url: String
}

input SocialIconLinkCreateManyInlineInput {
    """
    Create and connect multiple existing SocialIconLink documents
    """
    create: [SocialIconLinkCreateInput!]
}

input SocialIconLinkCreateOneInlineInput {
    """
    Create and connect one SocialIconLink document
    """
    create: SocialIconLinkCreateInput
}

input SocialIconLinkCreateWithPositionInput {
    """
    Document to create
    """
    data: SocialIconLinkCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type SocialIconLinkEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: SocialIconLink!
}

"""
Identifies documents
"""
input SocialIconLinkManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [SocialIconLinkWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [SocialIconLinkWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [SocialIconLinkWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    iconName: String
    """
    All values containing the given string.
    """
    iconName_contains: String
    """
    All values ending with the given string.
    """
    iconName_ends_with: String
    """
    All values that are contained in given list.
    """
    iconName_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    iconName_not: String
    """
    All values not containing the given string.
    """
    iconName_not_contains: String
    """
    All values not ending with the given string
    """
    iconName_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    iconName_not_in: [String]
    """
    All values not starting with the given string.
    """
    iconName_not_starts_with: String
    """
    All values starting with the given string.
    """
    iconName_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

enum SocialIconLinkOrderByInput {
    iconName_ASC
    iconName_DESC
    id_ASC
    id_DESC
    label_ASC
    label_DESC
    url_ASC
    url_DESC
}

union SocialIconLinkParent = Footer | Person

input SocialIconLinkParentConnectInput {
    Footer: FooterConnectInput
    Person: PersonConnectInput
}

input SocialIconLinkParentCreateInput {
    Footer: FooterCreateInput
    Person: PersonCreateInput
}

input SocialIconLinkParentCreateManyInlineInput {
    """
    Connect multiple existing SocialIconLinkParent documents
    """
    connect: [SocialIconLinkParentWhereUniqueInput!]
    """
    Create and connect multiple existing SocialIconLinkParent documents
    """
    create: [SocialIconLinkParentCreateInput!]
}

input SocialIconLinkParentCreateOneInlineInput {
    """
    Connect one existing SocialIconLinkParent document
    """
    connect: SocialIconLinkParentWhereUniqueInput
    """
    Create and connect one SocialIconLinkParent document
    """
    create: SocialIconLinkParentCreateInput
}

input SocialIconLinkParentUpdateInput {
    Footer: FooterUpdateInput
    Person: PersonUpdateInput
}

input SocialIconLinkParentUpdateManyInlineInput {
    """
    Connect multiple existing SocialIconLinkParent documents
    """
    connect: [SocialIconLinkParentConnectInput!]
    """
    Create and connect multiple SocialIconLinkParent documents
    """
    create: [SocialIconLinkParentCreateInput!]
    """
    Delete multiple SocialIconLinkParent documents
    """
    delete: [SocialIconLinkParentWhereUniqueInput!]
    """
    Disconnect multiple SocialIconLinkParent documents
    """
    disconnect: [SocialIconLinkParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing SocialIconLinkParent documents
    """
    set: [SocialIconLinkParentWhereUniqueInput!]
    """
    Update multiple SocialIconLinkParent documents
    """
    update: [SocialIconLinkParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple SocialIconLinkParent documents
    """
    upsert: [SocialIconLinkParentUpsertWithNestedWhereUniqueInput!]
}

input SocialIconLinkParentUpdateManyWithNestedWhereInput {
    Footer: FooterUpdateManyWithNestedWhereInput
    Person: PersonUpdateManyWithNestedWhereInput
}

input SocialIconLinkParentUpdateOneInlineInput {
    """
    Connect existing SocialIconLinkParent document
    """
    connect: SocialIconLinkParentWhereUniqueInput
    """
    Create and connect one SocialIconLinkParent document
    """
    create: SocialIconLinkParentCreateInput
    """
    Delete currently connected SocialIconLinkParent document
    """
    delete: Boolean
    """
    Disconnect currently connected SocialIconLinkParent document
    """
    disconnect: Boolean
    """
    Update single SocialIconLinkParent document
    """
    update: SocialIconLinkParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single SocialIconLinkParent document
    """
    upsert: SocialIconLinkParentUpsertWithNestedWhereUniqueInput
}

input SocialIconLinkParentUpdateWithNestedWhereUniqueInput {
    Footer: FooterUpdateWithNestedWhereUniqueInput
    Person: PersonUpdateWithNestedWhereUniqueInput
}

input SocialIconLinkParentUpsertWithNestedWhereUniqueInput {
    Footer: FooterUpsertWithNestedWhereUniqueInput
    Person: PersonUpsertWithNestedWhereUniqueInput
}

input SocialIconLinkParentWhereInput {
    Footer: FooterWhereInput
    Person: PersonWhereInput
}

input SocialIconLinkParentWhereUniqueInput {
    Footer: FooterWhereUniqueInput
    Person: PersonWhereUniqueInput
}

input SocialIconLinkUpdateInput {
    iconName: String
    label: String
    url: String
}

input SocialIconLinkUpdateManyInlineInput {
    """
    Create and connect multiple SocialIconLink component instances
    """
    create: [SocialIconLinkCreateWithPositionInput!]
    """
    Delete multiple SocialIconLink documents
    """
    delete: [SocialIconLinkWhereUniqueInput!]
    """
    Update multiple SocialIconLink component instances
    """
    update: [SocialIconLinkUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple SocialIconLink component instances
    """
    upsert: [SocialIconLinkUpsertWithNestedWhereUniqueAndPositionInput!]
}

input SocialIconLinkUpdateManyInput {
    iconName: String
    label: String
    url: String
}

input SocialIconLinkUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: SocialIconLinkUpdateManyInput!
    """
    Document search
    """
    where: SocialIconLinkWhereInput!
}

input SocialIconLinkUpdateOneInlineInput {
    """
    Create and connect one SocialIconLink document
    """
    create: SocialIconLinkCreateInput
    """
    Delete currently connected SocialIconLink document
    """
    delete: Boolean
    """
    Update single SocialIconLink document
    """
    update: SocialIconLinkUpdateWithNestedWhereUniqueInput
    """
    Upsert single SocialIconLink document
    """
    upsert: SocialIconLinkUpsertWithNestedWhereUniqueInput
}

input SocialIconLinkUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: SocialIconLinkUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: SocialIconLinkWhereUniqueInput!
}

input SocialIconLinkUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: SocialIconLinkUpdateInput!
    """
    Unique document search
    """
    where: SocialIconLinkWhereUniqueInput!
}

input SocialIconLinkUpsertInput {
    """
    Create document if it didn't exist
    """
    create: SocialIconLinkCreateInput!
    """
    Update document if it exists
    """
    update: SocialIconLinkUpdateInput!
}

input SocialIconLinkUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: SocialIconLinkUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: SocialIconLinkWhereUniqueInput!
}

input SocialIconLinkUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: SocialIconLinkUpsertInput!
    """
    Unique document search
    """
    where: SocialIconLinkWhereUniqueInput!
}

"""
Identifies documents
"""
input SocialIconLinkWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [SocialIconLinkWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [SocialIconLinkWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [SocialIconLinkWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    iconName: String
    """
    All values containing the given string.
    """
    iconName_contains: String
    """
    All values ending with the given string.
    """
    iconName_ends_with: String
    """
    All values that are contained in given list.
    """
    iconName_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    iconName_not: String
    """
    All values not containing the given string.
    """
    iconName_not_contains: String
    """
    All values not ending with the given string
    """
    iconName_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    iconName_not_in: [String]
    """
    All values not starting with the given string.
    """
    iconName_not_starts_with: String
    """
    All values starting with the given string.
    """
    iconName_starts_with: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    label: String
    """
    All values containing the given string.
    """
    label_contains: String
    """
    All values ending with the given string.
    """
    label_ends_with: String
    """
    All values that are contained in given list.
    """
    label_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    label_not: String
    """
    All values not containing the given string.
    """
    label_not_contains: String
    """
    All values not ending with the given string
    """
    label_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    label_not_in: [String]
    """
    All values not starting with the given string.
    """
    label_not_starts_with: String
    """
    All values starting with the given string.
    """
    label_starts_with: String
    url: String
    """
    All values containing the given string.
    """
    url_contains: String
    """
    All values ending with the given string.
    """
    url_ends_with: String
    """
    All values that are contained in given list.
    """
    url_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    url_not: String
    """
    All values not containing the given string.
    """
    url_not_contains: String
    """
    All values not ending with the given string
    """
    url_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    url_not_in: [String]
    """
    All values not starting with the given string.
    """
    url_not_starts_with: String
    """
    All values starting with the given string.
    """
    url_starts_with: String
}

"""
References SocialIconLink record uniquely
"""
input SocialIconLinkWhereUniqueInput {
    id: ID
}

"""
Stage system enumeration
"""
enum Stage {
    """
    The Draft is the default stage for all your content.
    """
    DRAFT
    """
    The Published stage is where you can publish your content to.
    """
    PUBLISHED
}

enum SystemDateTimeFieldVariation {
    BASE
    COMBINED
    LOCALIZATION
}

type TeamSection implements Entity {
    """
    The unique identifier
    """
    id: ID!
    """
    System stage field
    """
    stage: Stage!
    subtitle: String
    team(
        after: String
        before: String
        first: Int
        """
        Sets the locale of the resolved parent document as the only locale in the query's subtree.

        Note that `team` is a model without localized fields and will not be affected directly by this argument, however the locale will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will affect any existing locale filtering defined in the query's tree for the subtree.
        """
        forceParentLocale: Boolean
        last: Int
        """
        Allows to optionally override locale filtering behaviour in the query's subtree.

        Note that `team` is a model without localized fields and will not be affected directly by this argument, however the locales will be passed on to any relational fields in the query's subtree for filtering.
        For related models with localized fields in the query's subtree, the first locale matching the provided list of locales will be returned, entries with non matching locales will be filtered out.

        This argument will overwrite any existing locale filtering defined in the query's tree for the subtree.
        """
        locales: [Locale!]
        orderBy: PersonOrderByInput
        skip: Int
        where: PersonWhereInput
    ): [Person!]!
    """
    The section's title.
    """
    title: String
    variant: TeamSectionVariant
}

input TeamSectionConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: TeamSectionWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type TeamSectionConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [TeamSectionEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input TeamSectionCreateInput {
    subtitle: String
    team: PersonCreateManyInlineInput
    title: String
    variant: TeamSectionVariant
}

input TeamSectionCreateManyInlineInput {
    """
    Create and connect multiple existing TeamSection documents
    """
    create: [TeamSectionCreateInput!]
}

input TeamSectionCreateOneInlineInput {
    """
    Create and connect one TeamSection document
    """
    create: TeamSectionCreateInput
}

input TeamSectionCreateWithPositionInput {
    """
    Document to create
    """
    data: TeamSectionCreateInput!
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
}

"""
An edge in a connection.
"""
type TeamSectionEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: TeamSection!
}

"""
Identifies documents
"""
input TeamSectionManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [TeamSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [TeamSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [TeamSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    team_every: PersonWhereInput
    team_none: PersonWhereInput
    team_some: PersonWhereInput
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    variant: TeamSectionVariant
    """
    All values that are contained in given list.
    """
    variant_in: [TeamSectionVariant]
    """
    Any other value that exists and is not equal to the given value.
    """
    variant_not: TeamSectionVariant
    """
    All values that are not contained in given list.
    """
    variant_not_in: [TeamSectionVariant]
}

enum TeamSectionOrderByInput {
    id_ASC
    id_DESC
    subtitle_ASC
    subtitle_DESC
    title_ASC
    title_DESC
    variant_ASC
    variant_DESC
}

union TeamSectionParent = LandingPage

input TeamSectionParentConnectInput {
    LandingPage: LandingPageConnectInput
}

input TeamSectionParentCreateInput {
    LandingPage: LandingPageCreateInput
}

input TeamSectionParentCreateManyInlineInput {
    """
    Connect multiple existing TeamSectionParent documents
    """
    connect: [TeamSectionParentWhereUniqueInput!]
    """
    Create and connect multiple existing TeamSectionParent documents
    """
    create: [TeamSectionParentCreateInput!]
}

input TeamSectionParentCreateOneInlineInput {
    """
    Connect one existing TeamSectionParent document
    """
    connect: TeamSectionParentWhereUniqueInput
    """
    Create and connect one TeamSectionParent document
    """
    create: TeamSectionParentCreateInput
}

input TeamSectionParentUpdateInput {
    LandingPage: LandingPageUpdateInput
}

input TeamSectionParentUpdateManyInlineInput {
    """
    Connect multiple existing TeamSectionParent documents
    """
    connect: [TeamSectionParentConnectInput!]
    """
    Create and connect multiple TeamSectionParent documents
    """
    create: [TeamSectionParentCreateInput!]
    """
    Delete multiple TeamSectionParent documents
    """
    delete: [TeamSectionParentWhereUniqueInput!]
    """
    Disconnect multiple TeamSectionParent documents
    """
    disconnect: [TeamSectionParentWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing TeamSectionParent documents
    """
    set: [TeamSectionParentWhereUniqueInput!]
    """
    Update multiple TeamSectionParent documents
    """
    update: [TeamSectionParentUpdateWithNestedWhereUniqueInput!]
    """
    Upsert multiple TeamSectionParent documents
    """
    upsert: [TeamSectionParentUpsertWithNestedWhereUniqueInput!]
}

input TeamSectionParentUpdateManyWithNestedWhereInput {
    LandingPage: LandingPageUpdateManyWithNestedWhereInput
}

input TeamSectionParentUpdateOneInlineInput {
    """
    Connect existing TeamSectionParent document
    """
    connect: TeamSectionParentWhereUniqueInput
    """
    Create and connect one TeamSectionParent document
    """
    create: TeamSectionParentCreateInput
    """
    Delete currently connected TeamSectionParent document
    """
    delete: Boolean
    """
    Disconnect currently connected TeamSectionParent document
    """
    disconnect: Boolean
    """
    Update single TeamSectionParent document
    """
    update: TeamSectionParentUpdateWithNestedWhereUniqueInput
    """
    Upsert single TeamSectionParent document
    """
    upsert: TeamSectionParentUpsertWithNestedWhereUniqueInput
}

input TeamSectionParentUpdateWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpdateWithNestedWhereUniqueInput
}

input TeamSectionParentUpsertWithNestedWhereUniqueInput {
    LandingPage: LandingPageUpsertWithNestedWhereUniqueInput
}

input TeamSectionParentWhereInput {
    LandingPage: LandingPageWhereInput
}

input TeamSectionParentWhereUniqueInput {
    LandingPage: LandingPageWhereUniqueInput
}

input TeamSectionUpdateInput {
    subtitle: String
    team: PersonUpdateManyInlineInput
    title: String
    variant: TeamSectionVariant
}

input TeamSectionUpdateManyInlineInput {
    """
    Create and connect multiple TeamSection component instances
    """
    create: [TeamSectionCreateWithPositionInput!]
    """
    Delete multiple TeamSection documents
    """
    delete: [TeamSectionWhereUniqueInput!]
    """
    Update multiple TeamSection component instances
    """
    update: [TeamSectionUpdateWithNestedWhereUniqueAndPositionInput!]
    """
    Upsert multiple TeamSection component instances
    """
    upsert: [TeamSectionUpsertWithNestedWhereUniqueAndPositionInput!]
}

input TeamSectionUpdateManyInput {
    subtitle: String
    title: String
    variant: TeamSectionVariant
}

input TeamSectionUpdateManyWithNestedWhereInput {
    """
    Update many input
    """
    data: TeamSectionUpdateManyInput!
    """
    Document search
    """
    where: TeamSectionWhereInput!
}

input TeamSectionUpdateOneInlineInput {
    """
    Create and connect one TeamSection document
    """
    create: TeamSectionCreateInput
    """
    Delete currently connected TeamSection document
    """
    delete: Boolean
    """
    Update single TeamSection document
    """
    update: TeamSectionUpdateWithNestedWhereUniqueInput
    """
    Upsert single TeamSection document
    """
    upsert: TeamSectionUpsertWithNestedWhereUniqueInput
}

input TeamSectionUpdateWithNestedWhereUniqueAndPositionInput {
    """
    Document to update
    """
    data: TeamSectionUpdateInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: TeamSectionWhereUniqueInput!
}

input TeamSectionUpdateWithNestedWhereUniqueInput {
    """
    Document to update
    """
    data: TeamSectionUpdateInput!
    """
    Unique document search
    """
    where: TeamSectionWhereUniqueInput!
}

input TeamSectionUpsertInput {
    """
    Create document if it didn't exist
    """
    create: TeamSectionCreateInput!
    """
    Update document if it exists
    """
    update: TeamSectionUpdateInput!
}

input TeamSectionUpsertWithNestedWhereUniqueAndPositionInput {
    """
    Document to upsert
    """
    data: TeamSectionUpsertInput
    """
    Position in the list of existing component instances, will default to appending at the end of list
    """
    position: ConnectPositionInput
    """
    Unique component instance search
    """
    where: TeamSectionWhereUniqueInput!
}

input TeamSectionUpsertWithNestedWhereUniqueInput {
    """
    Upsert data
    """
    data: TeamSectionUpsertInput!
    """
    Unique document search
    """
    where: TeamSectionWhereUniqueInput!
}

"""
The visual variant of the section - cards or grid - in the Team Section component.
"""
enum TeamSectionVariant {
    cards
    grid
}

"""
Identifies documents
"""
input TeamSectionWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [TeamSectionWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [TeamSectionWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [TeamSectionWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    subtitle: String
    """
    All values containing the given string.
    """
    subtitle_contains: String
    """
    All values ending with the given string.
    """
    subtitle_ends_with: String
    """
    All values that are contained in given list.
    """
    subtitle_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    subtitle_not: String
    """
    All values not containing the given string.
    """
    subtitle_not_contains: String
    """
    All values not ending with the given string
    """
    subtitle_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    subtitle_not_in: [String]
    """
    All values not starting with the given string.
    """
    subtitle_not_starts_with: String
    """
    All values starting with the given string.
    """
    subtitle_starts_with: String
    team_every: PersonWhereInput
    team_none: PersonWhereInput
    team_some: PersonWhereInput
    title: String
    """
    All values containing the given string.
    """
    title_contains: String
    """
    All values ending with the given string.
    """
    title_ends_with: String
    """
    All values that are contained in given list.
    """
    title_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    title_not: String
    """
    All values not containing the given string.
    """
    title_not_contains: String
    """
    All values not ending with the given string
    """
    title_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    title_not_in: [String]
    """
    All values not starting with the given string.
    """
    title_not_starts_with: String
    """
    All values starting with the given string.
    """
    title_starts_with: String
    variant: TeamSectionVariant
    """
    All values that are contained in given list.
    """
    variant_in: [TeamSectionVariant]
    """
    Any other value that exists and is not equal to the given value.
    """
    variant_not: TeamSectionVariant
    """
    All values that are not contained in given list.
    """
    variant_not_in: [TeamSectionVariant]
}

"""
References TeamSection record uniquely
"""
input TeamSectionWhereUniqueInput {
    id: ID
}

input UnpublishLocaleInput {
    """
    Locales to unpublish
    """
    locale: Locale!
    """
    Stages to unpublish selected locales from
    """
    stages: [Stage!]!
}

"""
User system model
"""
type User implements Entity & Node {
    """
    The time the document was created
    """
    createdAt: DateTime!
    """
    Get the document in other stages
    """
    documentInStages(
        """
        Decides if the current stage should be included or not
        """
        includeCurrent: Boolean! = false
        """
        Decides if the documents should match the parent documents locale or should use the fallback order defined in the tree
        """
        inheritLocale: Boolean! = false
        """
        Potential stages that should be returned
        """
        stages: [Stage!]! = [DRAFT, PUBLISHED]
    ): [User!]!
    """
    The unique identifier
    """
    id: ID!
    """
    Flag to determine if user is active or not
    """
    isActive: Boolean!
    """
    User Kind. Can be either MEMBER, PAT or PUBLIC
    """
    kind: UserKind!
    """
    The username
    """
    name: String!
    """
    Profile Picture url
    """
    picture: String
    """
    The time the document was published. Null on documents in draft stage.
    """
    publishedAt: DateTime
    """
    System stage field
    """
    stage: Stage!
    """
    The time the document was updated
    """
    updatedAt: DateTime!
}

input UserConnectInput {
    """
    Allow to specify document position in list of connected documents, will default to appending at end of list
    """
    position: ConnectPositionInput
    """
    Document to connect
    """
    where: UserWhereUniqueInput!
}

"""
A connection to a list of items.
"""
type UserConnection {
    aggregate: Aggregate!
    """
    A list of edges.
    """
    edges: [UserEdge!]!
    """
    Information to aid in pagination.
    """
    pageInfo: PageInfo!
}

input UserCreateManyInlineInput {
    """
    Connect multiple existing User documents
    """
    connect: [UserWhereUniqueInput!]
}

input UserCreateOneInlineInput {
    """
    Connect one existing User document
    """
    connect: UserWhereUniqueInput
}

"""
An edge in a connection.
"""
type UserEdge {
    """
    A cursor for use in pagination.
    """
    cursor: String!
    """
    The item at the end of the edge.
    """
    node: User!
}

"""
System User Kind
"""
enum UserKind {
    APP_TOKEN
    MEMBER
    PAT
    PUBLIC
    WEBHOOK
}

"""
Identifies documents
"""
input UserManyWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [UserWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [UserWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [UserWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    documentInStages_every: UserWhereStageInput
    documentInStages_none: UserWhereStageInput
    documentInStages_some: UserWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    isActive: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    isActive_not: Boolean
    kind: UserKind
    """
    All values that are contained in given list.
    """
    kind_in: [UserKind]
    """
    Any other value that exists and is not equal to the given value.
    """
    kind_not: UserKind
    """
    All values that are not contained in given list.
    """
    kind_not_in: [UserKind]
    name: String
    """
    All values containing the given string.
    """
    name_contains: String
    """
    All values ending with the given string.
    """
    name_ends_with: String
    """
    All values that are contained in given list.
    """
    name_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    name_not: String
    """
    All values not containing the given string.
    """
    name_not_contains: String
    """
    All values not ending with the given string
    """
    name_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    name_not_in: [String]
    """
    All values not starting with the given string.
    """
    name_not_starts_with: String
    """
    All values starting with the given string.
    """
    name_starts_with: String
    picture: String
    """
    All values containing the given string.
    """
    picture_contains: String
    """
    All values ending with the given string.
    """
    picture_ends_with: String
    """
    All values that are contained in given list.
    """
    picture_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    picture_not: String
    """
    All values not containing the given string.
    """
    picture_not_contains: String
    """
    All values not ending with the given string
    """
    picture_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    picture_not_in: [String]
    """
    All values not starting with the given string.
    """
    picture_not_starts_with: String
    """
    All values starting with the given string.
    """
    picture_starts_with: String
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
}

enum UserOrderByInput {
    createdAt_ASC
    createdAt_DESC
    id_ASC
    id_DESC
    isActive_ASC
    isActive_DESC
    kind_ASC
    kind_DESC
    name_ASC
    name_DESC
    picture_ASC
    picture_DESC
    publishedAt_ASC
    publishedAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

input UserUpdateManyInlineInput {
    """
    Connect multiple existing User documents
    """
    connect: [UserConnectInput!]
    """
    Disconnect multiple User documents
    """
    disconnect: [UserWhereUniqueInput!]
    """
    Override currently-connected documents with multiple existing User documents
    """
    set: [UserWhereUniqueInput!]
}

input UserUpdateOneInlineInput {
    """
    Connect existing User document
    """
    connect: UserWhereUniqueInput
    """
    Disconnect currently connected User document
    """
    disconnect: Boolean
}

"""
This contains a set of filters that can be used to compare values internally
"""
input UserWhereComparatorInput {
    """
    This field can be used to request to check if the entry is outdated by internal comparison
    """
    outdated_to: Boolean
}

"""
Identifies documents
"""
input UserWhereInput {
    """
    Logical AND on all given filters.
    """
    AND: [UserWhereInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [UserWhereInput!]
    """
    Logical OR on all given filters.
    """
    OR: [UserWhereInput!]
    """
    Contains search across all appropriate fields.
    """
    _search: String
    createdAt: DateTime
    """
    All values greater than the given value.
    """
    createdAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    createdAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    createdAt_in: [DateTime]
    """
    All values less than the given value.
    """
    createdAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    createdAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    createdAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    createdAt_not_in: [DateTime]
    documentInStages_every: UserWhereStageInput
    documentInStages_none: UserWhereStageInput
    documentInStages_some: UserWhereStageInput
    id: ID
    """
    All values containing the given string.
    """
    id_contains: ID
    """
    All values ending with the given string.
    """
    id_ends_with: ID
    """
    All values that are contained in given list.
    """
    id_in: [ID]
    """
    Any other value that exists and is not equal to the given value.
    """
    id_not: ID
    """
    All values not containing the given string.
    """
    id_not_contains: ID
    """
    All values not ending with the given string
    """
    id_not_ends_with: ID
    """
    All values that are not contained in given list.
    """
    id_not_in: [ID]
    """
    All values not starting with the given string.
    """
    id_not_starts_with: ID
    """
    All values starting with the given string.
    """
    id_starts_with: ID
    isActive: Boolean
    """
    Any other value that exists and is not equal to the given value.
    """
    isActive_not: Boolean
    kind: UserKind
    """
    All values that are contained in given list.
    """
    kind_in: [UserKind]
    """
    Any other value that exists and is not equal to the given value.
    """
    kind_not: UserKind
    """
    All values that are not contained in given list.
    """
    kind_not_in: [UserKind]
    name: String
    """
    All values containing the given string.
    """
    name_contains: String
    """
    All values ending with the given string.
    """
    name_ends_with: String
    """
    All values that are contained in given list.
    """
    name_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    name_not: String
    """
    All values not containing the given string.
    """
    name_not_contains: String
    """
    All values not ending with the given string
    """
    name_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    name_not_in: [String]
    """
    All values not starting with the given string.
    """
    name_not_starts_with: String
    """
    All values starting with the given string.
    """
    name_starts_with: String
    picture: String
    """
    All values containing the given string.
    """
    picture_contains: String
    """
    All values ending with the given string.
    """
    picture_ends_with: String
    """
    All values that are contained in given list.
    """
    picture_in: [String]
    """
    Any other value that exists and is not equal to the given value.
    """
    picture_not: String
    """
    All values not containing the given string.
    """
    picture_not_contains: String
    """
    All values not ending with the given string
    """
    picture_not_ends_with: String
    """
    All values that are not contained in given list.
    """
    picture_not_in: [String]
    """
    All values not starting with the given string.
    """
    picture_not_starts_with: String
    """
    All values starting with the given string.
    """
    picture_starts_with: String
    publishedAt: DateTime
    """
    All values greater than the given value.
    """
    publishedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    publishedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    publishedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    publishedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    publishedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    publishedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    publishedAt_not_in: [DateTime]
    updatedAt: DateTime
    """
    All values greater than the given value.
    """
    updatedAt_gt: DateTime
    """
    All values greater than or equal the given value.
    """
    updatedAt_gte: DateTime
    """
    All values that are contained in given list.
    """
    updatedAt_in: [DateTime]
    """
    All values less than the given value.
    """
    updatedAt_lt: DateTime
    """
    All values less than or equal the given value.
    """
    updatedAt_lte: DateTime
    """
    Any other value that exists and is not equal to the given value.
    """
    updatedAt_not: DateTime
    """
    All values that are not contained in given list.
    """
    updatedAt_not_in: [DateTime]
}

"""
The document in stages filter allows specifying a stage entry to cross compare the same document between different stages
"""
input UserWhereStageInput {
    """
    Logical AND on all given filters.
    """
    AND: [UserWhereStageInput!]
    """
    Logical NOT on all given filters combined by AND.
    """
    NOT: [UserWhereStageInput!]
    """
    Logical OR on all given filters.
    """
    OR: [UserWhereStageInput!]
    """
    This field contains fields which can be set as true or false to specify an internal comparison
    """
    compareWithParent: UserWhereComparatorInput
    """
    Specify the stage to compare with
    """
    stage: Stage
}

"""
References User record uniquely
"""
input UserWhereUniqueInput {
    id: ID
}

type Version {
    createdAt: DateTime!
    id: ID!
    revision: Int!
    stage: Stage!
}

input VersionWhereInput {
    id: ID!
    revision: Int!
    stage: Stage!
}

enum _FilterKind {
    AND
    NOT
    OR
    contains
    contains_all
    contains_none
    contains_some
    ends_with
    eq
    eq_not
    gt
    gte
    in
    json_path_exists
    json_value_recursive
    lt
    lte
    not_contains
    not_ends_with
    not_in
    not_starts_with
    relational_every
    relational_none
    relational_single
    relational_some
    search
    starts_with
    union_empty
    union_every
    union_none
    union_single
    union_some
}

enum _MutationInputFieldKind {
    enum
    relation
    richText
    richTextWithEmbeds
    scalar
    union
    virtual
}

enum _MutationKind {
    create
    delete
    deleteMany
    publish
    publishMany
    schedulePublish
    scheduleUnpublish
    unpublish
    unpublishMany
    update
    updateMany
    upsert
}

enum _OrderDirection {
    asc
    desc
}

enum _RelationInputCardinality {
    many
    one
}

enum _RelationInputKind {
    create
    update
}

enum _RelationKind {
    regular
    union
}

enum _SystemDateTimeFieldVariation {
    base
    combined
    localization
}
